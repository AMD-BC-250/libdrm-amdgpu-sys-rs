/* automatically generated by rust-bindgen 0.59.2 */

pub const __GNUC_VA_LIST: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __BITS_PER_LONG: u32 = 64;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const DRM_NAME: &[u8; 4usize] = b"drm\0";
pub const DRM_MIN_ORDER: u32 = 5;
pub const DRM_MAX_ORDER: u32 = 22;
pub const DRM_RAM_PERCENT: u32 = 10;
pub const _DRM_LOCK_HELD: u32 = 2147483648;
pub const _DRM_LOCK_CONT: u32 = 1073741824;
pub const _DRM_VBLANK_HIGH_CRTC_SHIFT: u32 = 1;
pub const _DRM_PRE_MODESET: u32 = 1;
pub const _DRM_POST_MODESET: u32 = 2;
pub const DRM_CAP_DUMB_BUFFER: u32 = 1;
pub const DRM_CAP_VBLANK_HIGH_CRTC: u32 = 2;
pub const DRM_CAP_DUMB_PREFERRED_DEPTH: u32 = 3;
pub const DRM_CAP_DUMB_PREFER_SHADOW: u32 = 4;
pub const DRM_CAP_PRIME: u32 = 5;
pub const DRM_PRIME_CAP_IMPORT: u32 = 1;
pub const DRM_PRIME_CAP_EXPORT: u32 = 2;
pub const DRM_CAP_TIMESTAMP_MONOTONIC: u32 = 6;
pub const DRM_CAP_ASYNC_PAGE_FLIP: u32 = 7;
pub const DRM_CAP_CURSOR_WIDTH: u32 = 8;
pub const DRM_CAP_CURSOR_HEIGHT: u32 = 9;
pub const DRM_CAP_ADDFB2_MODIFIERS: u32 = 16;
pub const DRM_CAP_PAGE_FLIP_TARGET: u32 = 17;
pub const DRM_CAP_CRTC_IN_VBLANK_EVENT: u32 = 18;
pub const DRM_CAP_SYNCOBJ: u32 = 19;
pub const DRM_CAP_SYNCOBJ_TIMELINE: u32 = 20;
pub const DRM_CLIENT_CAP_STEREO_3D: u32 = 1;
pub const DRM_CLIENT_CAP_UNIVERSAL_PLANES: u32 = 2;
pub const DRM_CLIENT_CAP_ATOMIC: u32 = 3;
pub const DRM_CLIENT_CAP_ASPECT_RATIO: u32 = 4;
pub const DRM_CLIENT_CAP_WRITEBACK_CONNECTORS: u32 = 5;
pub const DRM_SYNCOBJ_CREATE_SIGNALED: u32 = 1;
pub const DRM_SYNCOBJ_FD_TO_HANDLE_FLAGS_IMPORT_SYNC_FILE: u32 = 1;
pub const DRM_SYNCOBJ_HANDLE_TO_FD_FLAGS_EXPORT_SYNC_FILE: u32 = 1;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL: u32 = 1;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT: u32 = 2;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE: u32 = 4;
pub const DRM_SYNCOBJ_QUERY_FLAGS_LAST_SUBMITTED: u32 = 1;
pub const DRM_CRTC_SEQUENCE_RELATIVE: u32 = 1;
pub const DRM_CRTC_SEQUENCE_NEXT_ON_MISS: u32 = 2;
pub const DRM_CONNECTOR_NAME_LEN: u32 = 32;
pub const DRM_DISPLAY_MODE_LEN: u32 = 32;
pub const DRM_PROP_NAME_LEN: u32 = 32;
pub const DRM_MODE_TYPE_BUILTIN: u32 = 1;
pub const DRM_MODE_TYPE_CLOCK_C: u32 = 3;
pub const DRM_MODE_TYPE_CRTC_C: u32 = 5;
pub const DRM_MODE_TYPE_PREFERRED: u32 = 8;
pub const DRM_MODE_TYPE_DEFAULT: u32 = 16;
pub const DRM_MODE_TYPE_USERDEF: u32 = 32;
pub const DRM_MODE_TYPE_DRIVER: u32 = 64;
pub const DRM_MODE_TYPE_ALL: u32 = 104;
pub const DRM_MODE_FLAG_PHSYNC: u32 = 1;
pub const DRM_MODE_FLAG_NHSYNC: u32 = 2;
pub const DRM_MODE_FLAG_PVSYNC: u32 = 4;
pub const DRM_MODE_FLAG_NVSYNC: u32 = 8;
pub const DRM_MODE_FLAG_INTERLACE: u32 = 16;
pub const DRM_MODE_FLAG_DBLSCAN: u32 = 32;
pub const DRM_MODE_FLAG_CSYNC: u32 = 64;
pub const DRM_MODE_FLAG_PCSYNC: u32 = 128;
pub const DRM_MODE_FLAG_NCSYNC: u32 = 256;
pub const DRM_MODE_FLAG_HSKEW: u32 = 512;
pub const DRM_MODE_FLAG_BCAST: u32 = 1024;
pub const DRM_MODE_FLAG_PIXMUX: u32 = 2048;
pub const DRM_MODE_FLAG_DBLCLK: u32 = 4096;
pub const DRM_MODE_FLAG_CLKDIV2: u32 = 8192;
pub const DRM_MODE_FLAG_3D_MASK: u32 = 507904;
pub const DRM_MODE_FLAG_3D_NONE: u32 = 0;
pub const DRM_MODE_FLAG_3D_FRAME_PACKING: u32 = 16384;
pub const DRM_MODE_FLAG_3D_FIELD_ALTERNATIVE: u32 = 32768;
pub const DRM_MODE_FLAG_3D_LINE_ALTERNATIVE: u32 = 49152;
pub const DRM_MODE_FLAG_3D_SIDE_BY_SIDE_FULL: u32 = 65536;
pub const DRM_MODE_FLAG_3D_L_DEPTH: u32 = 81920;
pub const DRM_MODE_FLAG_3D_L_DEPTH_GFX_GFX_DEPTH: u32 = 98304;
pub const DRM_MODE_FLAG_3D_TOP_AND_BOTTOM: u32 = 114688;
pub const DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF: u32 = 131072;
pub const DRM_MODE_PICTURE_ASPECT_NONE: u32 = 0;
pub const DRM_MODE_PICTURE_ASPECT_4_3: u32 = 1;
pub const DRM_MODE_PICTURE_ASPECT_16_9: u32 = 2;
pub const DRM_MODE_PICTURE_ASPECT_64_27: u32 = 3;
pub const DRM_MODE_PICTURE_ASPECT_256_135: u32 = 4;
pub const DRM_MODE_CONTENT_TYPE_NO_DATA: u32 = 0;
pub const DRM_MODE_CONTENT_TYPE_GRAPHICS: u32 = 1;
pub const DRM_MODE_CONTENT_TYPE_PHOTO: u32 = 2;
pub const DRM_MODE_CONTENT_TYPE_CINEMA: u32 = 3;
pub const DRM_MODE_CONTENT_TYPE_GAME: u32 = 4;
pub const DRM_MODE_FLAG_PIC_AR_MASK: u32 = 7864320;
pub const DRM_MODE_FLAG_PIC_AR_NONE: u32 = 0;
pub const DRM_MODE_FLAG_PIC_AR_4_3: u32 = 524288;
pub const DRM_MODE_FLAG_PIC_AR_16_9: u32 = 1048576;
pub const DRM_MODE_FLAG_PIC_AR_64_27: u32 = 1572864;
pub const DRM_MODE_FLAG_PIC_AR_256_135: u32 = 2097152;
pub const DRM_MODE_FLAG_ALL: u32 = 521215;
pub const DRM_MODE_DPMS_ON: u32 = 0;
pub const DRM_MODE_DPMS_STANDBY: u32 = 1;
pub const DRM_MODE_DPMS_SUSPEND: u32 = 2;
pub const DRM_MODE_DPMS_OFF: u32 = 3;
pub const DRM_MODE_SCALE_NONE: u32 = 0;
pub const DRM_MODE_SCALE_FULLSCREEN: u32 = 1;
pub const DRM_MODE_SCALE_CENTER: u32 = 2;
pub const DRM_MODE_SCALE_ASPECT: u32 = 3;
pub const DRM_MODE_DITHERING_OFF: u32 = 0;
pub const DRM_MODE_DITHERING_ON: u32 = 1;
pub const DRM_MODE_DITHERING_AUTO: u32 = 2;
pub const DRM_MODE_DIRTY_OFF: u32 = 0;
pub const DRM_MODE_DIRTY_ON: u32 = 1;
pub const DRM_MODE_DIRTY_ANNOTATE: u32 = 2;
pub const DRM_MODE_LINK_STATUS_GOOD: u32 = 0;
pub const DRM_MODE_LINK_STATUS_BAD: u32 = 1;
pub const DRM_MODE_ROTATE_0: u32 = 1;
pub const DRM_MODE_ROTATE_90: u32 = 2;
pub const DRM_MODE_ROTATE_180: u32 = 4;
pub const DRM_MODE_ROTATE_270: u32 = 8;
pub const DRM_MODE_ROTATE_MASK: u32 = 15;
pub const DRM_MODE_REFLECT_X: u32 = 16;
pub const DRM_MODE_REFLECT_Y: u32 = 32;
pub const DRM_MODE_REFLECT_MASK: u32 = 48;
pub const DRM_MODE_CONTENT_PROTECTION_UNDESIRED: u32 = 0;
pub const DRM_MODE_CONTENT_PROTECTION_DESIRED: u32 = 1;
pub const DRM_MODE_CONTENT_PROTECTION_ENABLED: u32 = 2;
pub const DRM_MODE_PRESENT_TOP_FIELD: u32 = 1;
pub const DRM_MODE_PRESENT_BOTTOM_FIELD: u32 = 2;
pub const DRM_MODE_ENCODER_NONE: u32 = 0;
pub const DRM_MODE_ENCODER_DAC: u32 = 1;
pub const DRM_MODE_ENCODER_TMDS: u32 = 2;
pub const DRM_MODE_ENCODER_LVDS: u32 = 3;
pub const DRM_MODE_ENCODER_TVDAC: u32 = 4;
pub const DRM_MODE_ENCODER_VIRTUAL: u32 = 5;
pub const DRM_MODE_ENCODER_DSI: u32 = 6;
pub const DRM_MODE_ENCODER_DPMST: u32 = 7;
pub const DRM_MODE_ENCODER_DPI: u32 = 8;
pub const DRM_MODE_CONNECTOR_Unknown: u32 = 0;
pub const DRM_MODE_CONNECTOR_VGA: u32 = 1;
pub const DRM_MODE_CONNECTOR_DVII: u32 = 2;
pub const DRM_MODE_CONNECTOR_DVID: u32 = 3;
pub const DRM_MODE_CONNECTOR_DVIA: u32 = 4;
pub const DRM_MODE_CONNECTOR_Composite: u32 = 5;
pub const DRM_MODE_CONNECTOR_SVIDEO: u32 = 6;
pub const DRM_MODE_CONNECTOR_LVDS: u32 = 7;
pub const DRM_MODE_CONNECTOR_Component: u32 = 8;
pub const DRM_MODE_CONNECTOR_9PinDIN: u32 = 9;
pub const DRM_MODE_CONNECTOR_DisplayPort: u32 = 10;
pub const DRM_MODE_CONNECTOR_HDMIA: u32 = 11;
pub const DRM_MODE_CONNECTOR_HDMIB: u32 = 12;
pub const DRM_MODE_CONNECTOR_TV: u32 = 13;
pub const DRM_MODE_CONNECTOR_eDP: u32 = 14;
pub const DRM_MODE_CONNECTOR_VIRTUAL: u32 = 15;
pub const DRM_MODE_CONNECTOR_DSI: u32 = 16;
pub const DRM_MODE_CONNECTOR_DPI: u32 = 17;
pub const DRM_MODE_CONNECTOR_WRITEBACK: u32 = 18;
pub const DRM_MODE_CONNECTOR_SPI: u32 = 19;
pub const DRM_MODE_CONNECTOR_USB: u32 = 20;
pub const DRM_MODE_PROP_PENDING: u32 = 1;
pub const DRM_MODE_PROP_RANGE: u32 = 2;
pub const DRM_MODE_PROP_IMMUTABLE: u32 = 4;
pub const DRM_MODE_PROP_ENUM: u32 = 8;
pub const DRM_MODE_PROP_BLOB: u32 = 16;
pub const DRM_MODE_PROP_BITMASK: u32 = 32;
pub const DRM_MODE_PROP_LEGACY_TYPE: u32 = 58;
pub const DRM_MODE_PROP_EXTENDED_TYPE: u32 = 65472;
pub const DRM_MODE_PROP_ATOMIC: u32 = 2147483648;
pub const DRM_MODE_OBJECT_CRTC: u32 = 3435973836;
pub const DRM_MODE_OBJECT_CONNECTOR: u32 = 3233857728;
pub const DRM_MODE_OBJECT_ENCODER: u32 = 3772834016;
pub const DRM_MODE_OBJECT_MODE: u32 = 3739147998;
pub const DRM_MODE_OBJECT_PROPERTY: u32 = 2964369584;
pub const DRM_MODE_OBJECT_FB: u32 = 4227595259;
pub const DRM_MODE_OBJECT_BLOB: u32 = 3149642683;
pub const DRM_MODE_OBJECT_PLANE: u32 = 4008636142;
pub const DRM_MODE_OBJECT_ANY: u32 = 0;
pub const DRM_MODE_FB_INTERLACED: u32 = 1;
pub const DRM_MODE_FB_MODIFIERS: u32 = 2;
pub const DRM_MODE_FB_DIRTY_ANNOTATE_COPY: u32 = 1;
pub const DRM_MODE_FB_DIRTY_ANNOTATE_FILL: u32 = 2;
pub const DRM_MODE_FB_DIRTY_FLAGS: u32 = 3;
pub const DRM_MODE_FB_DIRTY_MAX_CLIPS: u32 = 256;
pub const DRM_MODE_CURSOR_BO: u32 = 1;
pub const DRM_MODE_CURSOR_MOVE: u32 = 2;
pub const DRM_MODE_CURSOR_FLAGS: u32 = 3;
pub const DRM_MODE_PAGE_FLIP_EVENT: u32 = 1;
pub const DRM_MODE_PAGE_FLIP_ASYNC: u32 = 2;
pub const DRM_MODE_PAGE_FLIP_TARGET_ABSOLUTE: u32 = 4;
pub const DRM_MODE_PAGE_FLIP_TARGET_RELATIVE: u32 = 8;
pub const DRM_MODE_PAGE_FLIP_TARGET: u32 = 12;
pub const DRM_MODE_PAGE_FLIP_FLAGS: u32 = 15;
pub const DRM_MODE_ATOMIC_TEST_ONLY: u32 = 256;
pub const DRM_MODE_ATOMIC_NONBLOCK: u32 = 512;
pub const DRM_MODE_ATOMIC_ALLOW_MODESET: u32 = 1024;
pub const DRM_MODE_ATOMIC_FLAGS: u32 = 1795;
pub const FORMAT_BLOB_CURRENT: u32 = 1;
pub const DRM_IOCTL_BASE: u8 = 100u8;
pub const DRM_COMMAND_BASE: u32 = 64;
pub const DRM_COMMAND_END: u32 = 160;
pub const DRM_EVENT_VBLANK: u32 = 1;
pub const DRM_EVENT_FLIP_COMPLETE: u32 = 2;
pub const DRM_EVENT_CRTC_SEQUENCE: u32 = 3;
pub const DRM_MAX_MINOR: u32 = 16;
pub const DRM_IOC_VOID: u32 = 0;
pub const DRM_IOC_READ: u32 = 2;
pub const DRM_IOC_WRITE: u32 = 1;
pub const DRM_IOC_READWRITE: u32 = 3;
pub const DRM_DEV_UID: u32 = 0;
pub const DRM_DEV_GID: u32 = 0;
pub const DRM_DIR_NAME: &[u8; 9usize] = b"/dev/dri\0";
pub const DRM_PRIMARY_MINOR_NAME: &[u8; 5usize] = b"card\0";
pub const DRM_CONTROL_MINOR_NAME: &[u8; 9usize] = b"controlD\0";
pub const DRM_RENDER_MINOR_NAME: &[u8; 8usize] = b"renderD\0";
pub const DRM_PROC_NAME: &[u8; 11usize] = b"/proc/dri/\0";
pub const DRM_DEV_NAME: &[u8; 10usize] = b"%s/card%d\0";
pub const DRM_CONTROL_DEV_NAME: &[u8; 14usize] = b"%s/controlD%d\0";
pub const DRM_RENDER_DEV_NAME: &[u8; 13usize] = b"%s/renderD%d\0";
pub const DRM_ERR_NO_DEVICE: i32 = -1001;
pub const DRM_ERR_NO_ACCESS: i32 = -1002;
pub const DRM_ERR_NOT_ROOT: i32 = -1003;
pub const DRM_ERR_INVALID: i32 = -1004;
pub const DRM_ERR_NO_FD: i32 = -1005;
pub const DRM_AGP_NO_HANDLE: u32 = 0;
pub const DRM_VBLANK_HIGH_CRTC_SHIFT: u32 = 1;
pub const DRM_LOCK_HELD: u32 = 2147483648;
pub const DRM_LOCK_CONT: u32 = 1073741824;
pub const DRM_NODE_PRIMARY: u32 = 0;
pub const DRM_NODE_CONTROL: u32 = 1;
pub const DRM_NODE_RENDER: u32 = 2;
pub const DRM_NODE_MAX: u32 = 3;
pub const DRM_EVENT_CONTEXT_VERSION: u32 = 4;
pub const DRM_BUS_PCI: u32 = 0;
pub const DRM_BUS_USB: u32 = 1;
pub const DRM_BUS_PLATFORM: u32 = 2;
pub const DRM_BUS_HOST1X: u32 = 3;
pub const DRM_PLATFORM_DEVICE_NAME_LEN: u32 = 512;
pub const DRM_HOST1X_DEVICE_NAME_LEN: u32 = 512;
pub const DRM_DEVICE_GET_PCI_REVISION: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const AMDGPU_CS_MAX_IBS_PER_SUBMIT: u32 = 4;
pub const AMDGPU_TIMEOUT_INFINITE: i32 = -1;
pub const AMDGPU_QUERY_FENCE_TIMEOUT_IS_ABSOLUTE: u32 = 1;
pub const AMDGPU_VA_RANGE_32_BIT: u32 = 1;
pub const AMDGPU_VA_RANGE_HIGH: u32 = 2;
pub const AMDGPU_VA_RANGE_REPLAYABLE: u32 = 4;
pub const DRM_AMDGPU_GEM_CREATE: u32 = 0;
pub const DRM_AMDGPU_GEM_MMAP: u32 = 1;
pub const DRM_AMDGPU_CTX: u32 = 2;
pub const DRM_AMDGPU_BO_LIST: u32 = 3;
pub const DRM_AMDGPU_CS: u32 = 4;
pub const DRM_AMDGPU_INFO: u32 = 5;
pub const DRM_AMDGPU_GEM_METADATA: u32 = 6;
pub const DRM_AMDGPU_GEM_WAIT_IDLE: u32 = 7;
pub const DRM_AMDGPU_GEM_VA: u32 = 8;
pub const DRM_AMDGPU_WAIT_CS: u32 = 9;
pub const DRM_AMDGPU_GEM_OP: u32 = 16;
pub const DRM_AMDGPU_GEM_USERPTR: u32 = 17;
pub const DRM_AMDGPU_WAIT_FENCES: u32 = 18;
pub const DRM_AMDGPU_VM: u32 = 19;
pub const DRM_AMDGPU_FENCE_TO_HANDLE: u32 = 20;
pub const DRM_AMDGPU_SCHED: u32 = 21;
pub const AMDGPU_GEM_DOMAIN_CPU: u32 = 1;
pub const AMDGPU_GEM_DOMAIN_GTT: u32 = 2;
pub const AMDGPU_GEM_DOMAIN_VRAM: u32 = 4;
pub const AMDGPU_GEM_DOMAIN_GDS: u32 = 8;
pub const AMDGPU_GEM_DOMAIN_GWS: u32 = 16;
pub const AMDGPU_GEM_DOMAIN_OA: u32 = 32;
pub const AMDGPU_GEM_DOMAIN_MASK: u32 = 63;
pub const AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED: u32 = 1;
pub const AMDGPU_GEM_CREATE_NO_CPU_ACCESS: u32 = 2;
pub const AMDGPU_GEM_CREATE_CPU_GTT_USWC: u32 = 4;
pub const AMDGPU_GEM_CREATE_VRAM_CLEARED: u32 = 8;
pub const AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS: u32 = 32;
pub const AMDGPU_GEM_CREATE_VM_ALWAYS_VALID: u32 = 64;
pub const AMDGPU_GEM_CREATE_EXPLICIT_SYNC: u32 = 128;
pub const AMDGPU_GEM_CREATE_CP_MQD_GFX9: u32 = 256;
pub const AMDGPU_GEM_CREATE_VRAM_WIPE_ON_RELEASE: u32 = 512;
pub const AMDGPU_GEM_CREATE_ENCRYPTED: u32 = 1024;
pub const AMDGPU_GEM_CREATE_PREEMPTIBLE: u32 = 2048;
pub const AMDGPU_BO_LIST_OP_CREATE: u32 = 0;
pub const AMDGPU_BO_LIST_OP_DESTROY: u32 = 1;
pub const AMDGPU_BO_LIST_OP_UPDATE: u32 = 2;
pub const AMDGPU_CTX_OP_ALLOC_CTX: u32 = 1;
pub const AMDGPU_CTX_OP_FREE_CTX: u32 = 2;
pub const AMDGPU_CTX_OP_QUERY_STATE: u32 = 3;
pub const AMDGPU_CTX_OP_QUERY_STATE2: u32 = 4;
pub const AMDGPU_CTX_OP_GET_STABLE_PSTATE: u32 = 5;
pub const AMDGPU_CTX_OP_SET_STABLE_PSTATE: u32 = 6;
pub const AMDGPU_CTX_NO_RESET: u32 = 0;
pub const AMDGPU_CTX_GUILTY_RESET: u32 = 1;
pub const AMDGPU_CTX_INNOCENT_RESET: u32 = 2;
pub const AMDGPU_CTX_UNKNOWN_RESET: u32 = 3;
pub const AMDGPU_CTX_QUERY2_FLAGS_RESET: u32 = 1;
pub const AMDGPU_CTX_QUERY2_FLAGS_VRAMLOST: u32 = 2;
pub const AMDGPU_CTX_QUERY2_FLAGS_GUILTY: u32 = 4;
pub const AMDGPU_CTX_QUERY2_FLAGS_RAS_CE: u32 = 8;
pub const AMDGPU_CTX_QUERY2_FLAGS_RAS_UE: u32 = 16;
pub const AMDGPU_CTX_PRIORITY_UNSET: i32 = -2048;
pub const AMDGPU_CTX_PRIORITY_VERY_LOW: i32 = -1023;
pub const AMDGPU_CTX_PRIORITY_LOW: i32 = -512;
pub const AMDGPU_CTX_PRIORITY_NORMAL: u32 = 0;
pub const AMDGPU_CTX_PRIORITY_HIGH: u32 = 512;
pub const AMDGPU_CTX_PRIORITY_VERY_HIGH: u32 = 1023;
pub const AMDGPU_CTX_STABLE_PSTATE_FLAGS_MASK: u32 = 15;
pub const AMDGPU_CTX_STABLE_PSTATE_NONE: u32 = 0;
pub const AMDGPU_CTX_STABLE_PSTATE_STANDARD: u32 = 1;
pub const AMDGPU_CTX_STABLE_PSTATE_MIN_SCLK: u32 = 2;
pub const AMDGPU_CTX_STABLE_PSTATE_MIN_MCLK: u32 = 3;
pub const AMDGPU_CTX_STABLE_PSTATE_PEAK: u32 = 4;
pub const AMDGPU_VM_OP_RESERVE_VMID: u32 = 1;
pub const AMDGPU_VM_OP_UNRESERVE_VMID: u32 = 2;
pub const AMDGPU_SCHED_OP_PROCESS_PRIORITY_OVERRIDE: u32 = 1;
pub const AMDGPU_SCHED_OP_CONTEXT_PRIORITY_OVERRIDE: u32 = 2;
pub const AMDGPU_GEM_USERPTR_READONLY: u32 = 1;
pub const AMDGPU_GEM_USERPTR_ANONONLY: u32 = 2;
pub const AMDGPU_GEM_USERPTR_VALIDATE: u32 = 4;
pub const AMDGPU_GEM_USERPTR_REGISTER: u32 = 8;
pub const AMDGPU_TILING_ARRAY_MODE_SHIFT: u32 = 0;
pub const AMDGPU_TILING_ARRAY_MODE_MASK: u32 = 15;
pub const AMDGPU_TILING_PIPE_CONFIG_SHIFT: u32 = 4;
pub const AMDGPU_TILING_PIPE_CONFIG_MASK: u32 = 31;
pub const AMDGPU_TILING_TILE_SPLIT_SHIFT: u32 = 9;
pub const AMDGPU_TILING_TILE_SPLIT_MASK: u32 = 7;
pub const AMDGPU_TILING_MICRO_TILE_MODE_SHIFT: u32 = 12;
pub const AMDGPU_TILING_MICRO_TILE_MODE_MASK: u32 = 7;
pub const AMDGPU_TILING_BANK_WIDTH_SHIFT: u32 = 15;
pub const AMDGPU_TILING_BANK_WIDTH_MASK: u32 = 3;
pub const AMDGPU_TILING_BANK_HEIGHT_SHIFT: u32 = 17;
pub const AMDGPU_TILING_BANK_HEIGHT_MASK: u32 = 3;
pub const AMDGPU_TILING_MACRO_TILE_ASPECT_SHIFT: u32 = 19;
pub const AMDGPU_TILING_MACRO_TILE_ASPECT_MASK: u32 = 3;
pub const AMDGPU_TILING_NUM_BANKS_SHIFT: u32 = 21;
pub const AMDGPU_TILING_NUM_BANKS_MASK: u32 = 3;
pub const AMDGPU_TILING_SWIZZLE_MODE_SHIFT: u32 = 0;
pub const AMDGPU_TILING_SWIZZLE_MODE_MASK: u32 = 31;
pub const AMDGPU_TILING_DCC_OFFSET_256B_SHIFT: u32 = 5;
pub const AMDGPU_TILING_DCC_OFFSET_256B_MASK: u32 = 16777215;
pub const AMDGPU_TILING_DCC_PITCH_MAX_SHIFT: u32 = 29;
pub const AMDGPU_TILING_DCC_PITCH_MAX_MASK: u32 = 16383;
pub const AMDGPU_TILING_DCC_INDEPENDENT_64B_SHIFT: u32 = 43;
pub const AMDGPU_TILING_DCC_INDEPENDENT_64B_MASK: u32 = 1;
pub const AMDGPU_TILING_DCC_INDEPENDENT_128B_SHIFT: u32 = 44;
pub const AMDGPU_TILING_DCC_INDEPENDENT_128B_MASK: u32 = 1;
pub const AMDGPU_TILING_SCANOUT_SHIFT: u32 = 63;
pub const AMDGPU_TILING_SCANOUT_MASK: u32 = 1;
pub const AMDGPU_GEM_METADATA_OP_SET_METADATA: u32 = 1;
pub const AMDGPU_GEM_METADATA_OP_GET_METADATA: u32 = 2;
pub const AMDGPU_GEM_OP_GET_GEM_CREATE_INFO: u32 = 0;
pub const AMDGPU_GEM_OP_SET_PLACEMENT: u32 = 1;
pub const AMDGPU_VA_OP_MAP: u32 = 1;
pub const AMDGPU_VA_OP_UNMAP: u32 = 2;
pub const AMDGPU_VA_OP_CLEAR: u32 = 3;
pub const AMDGPU_VA_OP_REPLACE: u32 = 4;
pub const AMDGPU_VM_DELAY_UPDATE: u32 = 1;
pub const AMDGPU_VM_PAGE_READABLE: u32 = 2;
pub const AMDGPU_VM_PAGE_WRITEABLE: u32 = 4;
pub const AMDGPU_VM_PAGE_EXECUTABLE: u32 = 8;
pub const AMDGPU_VM_PAGE_PRT: u32 = 16;
pub const AMDGPU_VM_MTYPE_MASK: u32 = 480;
pub const AMDGPU_VM_MTYPE_DEFAULT: u32 = 0;
pub const AMDGPU_VM_MTYPE_NC: u32 = 32;
pub const AMDGPU_VM_MTYPE_WC: u32 = 64;
pub const AMDGPU_VM_MTYPE_CC: u32 = 96;
pub const AMDGPU_VM_MTYPE_UC: u32 = 128;
pub const AMDGPU_VM_MTYPE_RW: u32 = 160;
pub const AMDGPU_HW_IP_GFX: u32 = 0;
pub const AMDGPU_HW_IP_COMPUTE: u32 = 1;
pub const AMDGPU_HW_IP_DMA: u32 = 2;
pub const AMDGPU_HW_IP_UVD: u32 = 3;
pub const AMDGPU_HW_IP_VCE: u32 = 4;
pub const AMDGPU_HW_IP_UVD_ENC: u32 = 5;
pub const AMDGPU_HW_IP_VCN_DEC: u32 = 6;
pub const AMDGPU_HW_IP_VCN_ENC: u32 = 7;
pub const AMDGPU_HW_IP_VCN_JPEG: u32 = 8;
pub const AMDGPU_HW_IP_NUM: u32 = 9;
pub const AMDGPU_HW_IP_INSTANCE_MAX_COUNT: u32 = 1;
pub const AMDGPU_CHUNK_ID_IB: u32 = 1;
pub const AMDGPU_CHUNK_ID_FENCE: u32 = 2;
pub const AMDGPU_CHUNK_ID_DEPENDENCIES: u32 = 3;
pub const AMDGPU_CHUNK_ID_SYNCOBJ_IN: u32 = 4;
pub const AMDGPU_CHUNK_ID_SYNCOBJ_OUT: u32 = 5;
pub const AMDGPU_CHUNK_ID_BO_HANDLES: u32 = 6;
pub const AMDGPU_CHUNK_ID_SCHEDULED_DEPENDENCIES: u32 = 7;
pub const AMDGPU_CHUNK_ID_SYNCOBJ_TIMELINE_WAIT: u32 = 8;
pub const AMDGPU_CHUNK_ID_SYNCOBJ_TIMELINE_SIGNAL: u32 = 9;
pub const AMDGPU_IB_FLAG_CE: u32 = 1;
pub const AMDGPU_IB_FLAG_PREAMBLE: u32 = 2;
pub const AMDGPU_IB_FLAG_PREEMPT: u32 = 4;
pub const AMDGPU_IB_FLAG_TC_WB_NOT_INVALIDATE: u32 = 8;
pub const AMDGPU_IB_FLAG_RESET_GDS_MAX_WAVE_ID: u32 = 16;
pub const AMDGPU_IB_FLAGS_SECURE: u32 = 32;
pub const AMDGPU_IB_FLAG_EMIT_MEM_SYNC: u32 = 64;
pub const AMDGPU_FENCE_TO_HANDLE_GET_SYNCOBJ: u32 = 0;
pub const AMDGPU_FENCE_TO_HANDLE_GET_SYNCOBJ_FD: u32 = 1;
pub const AMDGPU_FENCE_TO_HANDLE_GET_SYNC_FILE_FD: u32 = 2;
pub const AMDGPU_IDS_FLAGS_FUSION: u32 = 1;
pub const AMDGPU_IDS_FLAGS_PREEMPTION: u32 = 2;
pub const AMDGPU_IDS_FLAGS_TMZ: u32 = 4;
pub const AMDGPU_INFO_ACCEL_WORKING: u32 = 0;
pub const AMDGPU_INFO_CRTC_FROM_ID: u32 = 1;
pub const AMDGPU_INFO_HW_IP_INFO: u32 = 2;
pub const AMDGPU_INFO_HW_IP_COUNT: u32 = 3;
pub const AMDGPU_INFO_TIMESTAMP: u32 = 5;
pub const AMDGPU_INFO_FW_VERSION: u32 = 14;
pub const AMDGPU_INFO_FW_VCE: u32 = 1;
pub const AMDGPU_INFO_FW_UVD: u32 = 2;
pub const AMDGPU_INFO_FW_GMC: u32 = 3;
pub const AMDGPU_INFO_FW_GFX_ME: u32 = 4;
pub const AMDGPU_INFO_FW_GFX_PFP: u32 = 5;
pub const AMDGPU_INFO_FW_GFX_CE: u32 = 6;
pub const AMDGPU_INFO_FW_GFX_RLC: u32 = 7;
pub const AMDGPU_INFO_FW_GFX_MEC: u32 = 8;
pub const AMDGPU_INFO_FW_SMC: u32 = 10;
pub const AMDGPU_INFO_FW_SDMA: u32 = 11;
pub const AMDGPU_INFO_FW_SOS: u32 = 12;
pub const AMDGPU_INFO_FW_ASD: u32 = 13;
pub const AMDGPU_INFO_FW_VCN: u32 = 14;
pub const AMDGPU_INFO_FW_GFX_RLC_RESTORE_LIST_CNTL: u32 = 15;
pub const AMDGPU_INFO_FW_GFX_RLC_RESTORE_LIST_GPM_MEM: u32 = 16;
pub const AMDGPU_INFO_FW_GFX_RLC_RESTORE_LIST_SRM_MEM: u32 = 17;
pub const AMDGPU_INFO_FW_DMCU: u32 = 18;
pub const AMDGPU_INFO_FW_TA: u32 = 19;
pub const AMDGPU_INFO_FW_DMCUB: u32 = 20;
pub const AMDGPU_INFO_FW_TOC: u32 = 21;
pub const AMDGPU_INFO_NUM_BYTES_MOVED: u32 = 15;
pub const AMDGPU_INFO_VRAM_USAGE: u32 = 16;
pub const AMDGPU_INFO_GTT_USAGE: u32 = 17;
pub const AMDGPU_INFO_GDS_CONFIG: u32 = 19;
pub const AMDGPU_INFO_VRAM_GTT: u32 = 20;
pub const AMDGPU_INFO_READ_MMR_REG: u32 = 21;
pub const AMDGPU_INFO_DEV_INFO: u32 = 22;
pub const AMDGPU_INFO_VIS_VRAM_USAGE: u32 = 23;
pub const AMDGPU_INFO_NUM_EVICTIONS: u32 = 24;
pub const AMDGPU_INFO_MEMORY: u32 = 25;
pub const AMDGPU_INFO_VCE_CLOCK_TABLE: u32 = 26;
pub const AMDGPU_INFO_VBIOS: u32 = 27;
pub const AMDGPU_INFO_VBIOS_SIZE: u32 = 1;
pub const AMDGPU_INFO_VBIOS_IMAGE: u32 = 2;
pub const AMDGPU_INFO_VBIOS_INFO: u32 = 3;
pub const AMDGPU_INFO_NUM_HANDLES: u32 = 28;
pub const AMDGPU_INFO_SENSOR: u32 = 29;
pub const AMDGPU_INFO_SENSOR_GFX_SCLK: u32 = 1;
pub const AMDGPU_INFO_SENSOR_GFX_MCLK: u32 = 2;
pub const AMDGPU_INFO_SENSOR_GPU_TEMP: u32 = 3;
pub const AMDGPU_INFO_SENSOR_GPU_LOAD: u32 = 4;
pub const AMDGPU_INFO_SENSOR_GPU_AVG_POWER: u32 = 5;
pub const AMDGPU_INFO_SENSOR_VDDNB: u32 = 6;
pub const AMDGPU_INFO_SENSOR_VDDGFX: u32 = 7;
pub const AMDGPU_INFO_SENSOR_STABLE_PSTATE_GFX_SCLK: u32 = 8;
pub const AMDGPU_INFO_SENSOR_STABLE_PSTATE_GFX_MCLK: u32 = 9;
pub const AMDGPU_INFO_NUM_VRAM_CPU_PAGE_FAULTS: u32 = 30;
pub const AMDGPU_INFO_VRAM_LOST_COUNTER: u32 = 31;
pub const AMDGPU_INFO_RAS_ENABLED_FEATURES: u32 = 32;
pub const AMDGPU_INFO_RAS_ENABLED_UMC: u32 = 1;
pub const AMDGPU_INFO_RAS_ENABLED_SDMA: u32 = 2;
pub const AMDGPU_INFO_RAS_ENABLED_GFX: u32 = 4;
pub const AMDGPU_INFO_RAS_ENABLED_MMHUB: u32 = 8;
pub const AMDGPU_INFO_RAS_ENABLED_ATHUB: u32 = 16;
pub const AMDGPU_INFO_RAS_ENABLED_PCIE: u32 = 32;
pub const AMDGPU_INFO_RAS_ENABLED_HDP: u32 = 64;
pub const AMDGPU_INFO_RAS_ENABLED_XGMI: u32 = 128;
pub const AMDGPU_INFO_RAS_ENABLED_DF: u32 = 256;
pub const AMDGPU_INFO_RAS_ENABLED_SMN: u32 = 512;
pub const AMDGPU_INFO_RAS_ENABLED_SEM: u32 = 1024;
pub const AMDGPU_INFO_RAS_ENABLED_MP0: u32 = 2048;
pub const AMDGPU_INFO_RAS_ENABLED_MP1: u32 = 4096;
pub const AMDGPU_INFO_RAS_ENABLED_FUSE: u32 = 8192;
pub const AMDGPU_INFO_VIDEO_CAPS: u32 = 33;
pub const AMDGPU_INFO_VIDEO_CAPS_DECODE: u32 = 0;
pub const AMDGPU_INFO_VIDEO_CAPS_ENCODE: u32 = 1;
pub const AMDGPU_INFO_MMR_SE_INDEX_SHIFT: u32 = 0;
pub const AMDGPU_INFO_MMR_SE_INDEX_MASK: u32 = 255;
pub const AMDGPU_INFO_MMR_SH_INDEX_SHIFT: u32 = 8;
pub const AMDGPU_INFO_MMR_SH_INDEX_MASK: u32 = 255;
pub const AMDGPU_VRAM_TYPE_UNKNOWN: u32 = 0;
pub const AMDGPU_VRAM_TYPE_GDDR1: u32 = 1;
pub const AMDGPU_VRAM_TYPE_DDR2: u32 = 2;
pub const AMDGPU_VRAM_TYPE_GDDR3: u32 = 3;
pub const AMDGPU_VRAM_TYPE_GDDR4: u32 = 4;
pub const AMDGPU_VRAM_TYPE_GDDR5: u32 = 5;
pub const AMDGPU_VRAM_TYPE_HBM: u32 = 6;
pub const AMDGPU_VRAM_TYPE_DDR3: u32 = 7;
pub const AMDGPU_VRAM_TYPE_DDR4: u32 = 8;
pub const AMDGPU_VRAM_TYPE_GDDR6: u32 = 9;
pub const AMDGPU_VRAM_TYPE_DDR5: u32 = 10;
pub const AMDGPU_VCE_CLOCK_TABLE_ENTRIES: u32 = 6;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG2: u32 = 0;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG4: u32 = 1;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_VC1: u32 = 2;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG4_AVC: u32 = 3;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_HEVC: u32 = 4;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_JPEG: u32 = 5;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_VP9: u32 = 6;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_AV1: u32 = 7;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_COUNT: u32 = 8;
pub const AMDGPU_FAMILY_UNKNOWN: u32 = 0;
pub const AMDGPU_FAMILY_SI: u32 = 110;
pub const AMDGPU_FAMILY_CI: u32 = 120;
pub const AMDGPU_FAMILY_KV: u32 = 125;
pub const AMDGPU_FAMILY_VI: u32 = 130;
pub const AMDGPU_FAMILY_CZ: u32 = 135;
pub const AMDGPU_FAMILY_AI: u32 = 141;
pub const AMDGPU_FAMILY_RV: u32 = 142;
pub const AMDGPU_FAMILY_NV: u32 = 143;
pub const AMDGPU_FAMILY_VGH: u32 = 144;
pub const AMDGPU_FAMILY_YC: u32 = 146;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__low as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__high as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wseq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type drm_handle_t = ::std::os::raw::c_uint;
pub type drm_context_t = ::std::os::raw::c_uint;
pub type drm_drawable_t = ::std::os::raw::c_uint;
pub type drm_magic_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_clip_rect {
    pub x1: ::std::os::raw::c_ushort,
    pub y1: ::std::os::raw::c_ushort,
    pub x2: ::std::os::raw::c_ushort,
    pub y2: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_drm_clip_rect() {
    assert_eq!(
        ::std::mem::size_of::<drm_clip_rect>(),
        8usize,
        concat!("Size of: ", stringify!(drm_clip_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_clip_rect>(),
        2usize,
        concat!("Alignment of ", stringify!(drm_clip_rect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_clip_rect>())).x1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_clip_rect),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_clip_rect>())).y1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_clip_rect),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_clip_rect>())).x2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_clip_rect),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_clip_rect>())).y2 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_clip_rect),
            "::",
            stringify!(y2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_drawable_info {
    pub num_rects: ::std::os::raw::c_uint,
    pub rects: *mut drm_clip_rect,
}
#[test]
fn bindgen_test_layout_drm_drawable_info() {
    assert_eq!(
        ::std::mem::size_of::<drm_drawable_info>(),
        16usize,
        concat!("Size of: ", stringify!(drm_drawable_info))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_drawable_info>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_drawable_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_drawable_info>())).num_rects as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_drawable_info),
            "::",
            stringify!(num_rects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_drawable_info>())).rects as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_drawable_info),
            "::",
            stringify!(rects)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tex_region {
    pub next: ::std::os::raw::c_uchar,
    pub prev: ::std::os::raw::c_uchar,
    pub in_use: ::std::os::raw::c_uchar,
    pub padding: ::std::os::raw::c_uchar,
    pub age: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_drm_tex_region() {
    assert_eq!(
        ::std::mem::size_of::<drm_tex_region>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tex_region))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tex_region>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tex_region))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tex_region>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tex_region),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tex_region>())).prev as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tex_region),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tex_region>())).in_use as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tex_region),
            "::",
            stringify!(in_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tex_region>())).padding as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tex_region),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tex_region>())).age as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tex_region),
            "::",
            stringify!(age)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_hw_lock {
    pub lock: ::std::os::raw::c_uint,
    pub padding: [::std::os::raw::c_char; 60usize],
}
#[test]
fn bindgen_test_layout_drm_hw_lock() {
    assert_eq!(
        ::std::mem::size_of::<drm_hw_lock>(),
        64usize,
        concat!("Size of: ", stringify!(drm_hw_lock))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_hw_lock>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_hw_lock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_hw_lock>())).lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_hw_lock),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_hw_lock>())).padding as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_hw_lock),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_version {
    pub version_major: ::std::os::raw::c_int,
    pub version_minor: ::std::os::raw::c_int,
    pub version_patchlevel: ::std::os::raw::c_int,
    pub name_len: __kernel_size_t,
    pub name: *mut ::std::os::raw::c_char,
    pub date_len: __kernel_size_t,
    pub date: *mut ::std::os::raw::c_char,
    pub desc_len: __kernel_size_t,
    pub desc: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_drm_version() {
    assert_eq!(
        ::std::mem::size_of::<drm_version>(),
        64usize,
        concat!("Size of: ", stringify!(drm_version))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_version>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).version_major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(version_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).version_minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(version_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).version_patchlevel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(version_patchlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).name_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).date_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(date_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).date as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).desc_len as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(desc_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_version>())).desc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_version),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_unique {
    pub unique_len: __kernel_size_t,
    pub unique: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_drm_unique() {
    assert_eq!(
        ::std::mem::size_of::<drm_unique>(),
        16usize,
        concat!("Size of: ", stringify!(drm_unique))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_unique>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_unique))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_unique>())).unique_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_unique),
            "::",
            stringify!(unique_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_unique>())).unique as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_unique),
            "::",
            stringify!(unique)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_list {
    pub count: ::std::os::raw::c_int,
    pub version: *mut drm_version,
}
#[test]
fn bindgen_test_layout_drm_list() {
    assert_eq!(
        ::std::mem::size_of::<drm_list>(),
        16usize,
        concat!("Size of: ", stringify!(drm_list))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_list>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_list>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_list),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_list>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_list),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_block {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_drm_block() {
    assert_eq!(
        ::std::mem::size_of::<drm_block>(),
        4usize,
        concat!("Size of: ", stringify!(drm_block))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_block>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_block>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_block),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_control {
    pub func: drm_control__bindgen_ty_1,
    pub irq: ::std::os::raw::c_int,
}
pub const drm_control_DRM_ADD_COMMAND: ::std::os::raw::c_uint = 0;
pub const drm_control_DRM_RM_COMMAND: ::std::os::raw::c_uint = 1;
pub const drm_control_DRM_INST_HANDLER: ::std::os::raw::c_uint = 2;
pub const drm_control_DRM_UNINST_HANDLER: ::std::os::raw::c_uint = 3;
pub type drm_control__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_drm_control() {
    assert_eq!(
        ::std::mem::size_of::<drm_control>(),
        8usize,
        concat!("Size of: ", stringify!(drm_control))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_control>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_control))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_control>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_control),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_control>())).irq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_control),
            "::",
            stringify!(irq)
        )
    );
}
pub const drm_map_type__DRM_FRAME_BUFFER: drm_map_type = 0;
pub const drm_map_type__DRM_REGISTERS: drm_map_type = 1;
pub const drm_map_type__DRM_SHM: drm_map_type = 2;
pub const drm_map_type__DRM_AGP: drm_map_type = 3;
pub const drm_map_type__DRM_SCATTER_GATHER: drm_map_type = 4;
pub const drm_map_type__DRM_CONSISTENT: drm_map_type = 5;
pub type drm_map_type = ::std::os::raw::c_uint;
pub const drm_map_flags__DRM_RESTRICTED: drm_map_flags = 1;
pub const drm_map_flags__DRM_READ_ONLY: drm_map_flags = 2;
pub const drm_map_flags__DRM_LOCKED: drm_map_flags = 4;
pub const drm_map_flags__DRM_KERNEL: drm_map_flags = 8;
pub const drm_map_flags__DRM_WRITE_COMBINING: drm_map_flags = 16;
pub const drm_map_flags__DRM_CONTAINS_LOCK: drm_map_flags = 32;
pub const drm_map_flags__DRM_REMOVABLE: drm_map_flags = 64;
pub const drm_map_flags__DRM_DRIVER: drm_map_flags = 128;
pub type drm_map_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx_priv_map {
    pub ctx_id: ::std::os::raw::c_uint,
    pub handle: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_drm_ctx_priv_map() {
    assert_eq!(
        ::std::mem::size_of::<drm_ctx_priv_map>(),
        16usize,
        concat!("Size of: ", stringify!(drm_ctx_priv_map))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_ctx_priv_map>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_ctx_priv_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_ctx_priv_map>())).ctx_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_ctx_priv_map),
            "::",
            stringify!(ctx_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_ctx_priv_map>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_ctx_priv_map),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_map {
    pub offset: ::std::os::raw::c_ulong,
    pub size: ::std::os::raw::c_ulong,
    pub type_: drm_map_type,
    pub flags: drm_map_flags,
    pub handle: *mut ::std::os::raw::c_void,
    pub mtrr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_drm_map() {
    assert_eq!(
        ::std::mem::size_of::<drm_map>(),
        40usize,
        concat!("Size of: ", stringify!(drm_map))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_map>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_map>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_map),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_map>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_map),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_map>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_map),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_map>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_map),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_map>())).handle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_map),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_map>())).mtrr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_map),
            "::",
            stringify!(mtrr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_client {
    pub idx: ::std::os::raw::c_int,
    pub auth: ::std::os::raw::c_int,
    pub pid: ::std::os::raw::c_ulong,
    pub uid: ::std::os::raw::c_ulong,
    pub magic: ::std::os::raw::c_ulong,
    pub iocs: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_drm_client() {
    assert_eq!(
        ::std::mem::size_of::<drm_client>(),
        40usize,
        concat!("Size of: ", stringify!(drm_client))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_client>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_client))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_client>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_client),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_client>())).auth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_client),
            "::",
            stringify!(auth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_client>())).pid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_client),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_client>())).uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_client),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_client>())).magic as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_client),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_client>())).iocs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_client),
            "::",
            stringify!(iocs)
        )
    );
}
pub const drm_stat_type__DRM_STAT_LOCK: drm_stat_type = 0;
pub const drm_stat_type__DRM_STAT_OPENS: drm_stat_type = 1;
pub const drm_stat_type__DRM_STAT_CLOSES: drm_stat_type = 2;
pub const drm_stat_type__DRM_STAT_IOCTLS: drm_stat_type = 3;
pub const drm_stat_type__DRM_STAT_LOCKS: drm_stat_type = 4;
pub const drm_stat_type__DRM_STAT_UNLOCKS: drm_stat_type = 5;
pub const drm_stat_type__DRM_STAT_VALUE: drm_stat_type = 6;
pub const drm_stat_type__DRM_STAT_BYTE: drm_stat_type = 7;
pub const drm_stat_type__DRM_STAT_COUNT: drm_stat_type = 8;
pub const drm_stat_type__DRM_STAT_IRQ: drm_stat_type = 9;
pub const drm_stat_type__DRM_STAT_PRIMARY: drm_stat_type = 10;
pub const drm_stat_type__DRM_STAT_SECONDARY: drm_stat_type = 11;
pub const drm_stat_type__DRM_STAT_DMA: drm_stat_type = 12;
pub const drm_stat_type__DRM_STAT_SPECIAL: drm_stat_type = 13;
pub const drm_stat_type__DRM_STAT_MISSED: drm_stat_type = 14;
pub type drm_stat_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_stats {
    pub count: ::std::os::raw::c_ulong,
    pub data: [drm_stats__bindgen_ty_1; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_stats__bindgen_ty_1 {
    pub value: ::std::os::raw::c_ulong,
    pub type_: drm_stat_type,
}
#[test]
fn bindgen_test_layout_drm_stats__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_stats__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(drm_stats__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_stats__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_stats__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_stats__bindgen_ty_1>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_stats__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_stats__bindgen_ty_1>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_stats__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_stats() {
    assert_eq!(
        ::std::mem::size_of::<drm_stats>(),
        248usize,
        concat!("Size of: ", stringify!(drm_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_stats>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_stats),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_stats>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_stats),
            "::",
            stringify!(data)
        )
    );
}
pub const drm_lock_flags__DRM_LOCK_READY: drm_lock_flags = 1;
pub const drm_lock_flags__DRM_LOCK_QUIESCENT: drm_lock_flags = 2;
pub const drm_lock_flags__DRM_LOCK_FLUSH: drm_lock_flags = 4;
pub const drm_lock_flags__DRM_LOCK_FLUSH_ALL: drm_lock_flags = 8;
pub const drm_lock_flags__DRM_HALT_ALL_QUEUES: drm_lock_flags = 16;
pub const drm_lock_flags__DRM_HALT_CUR_QUEUES: drm_lock_flags = 32;
pub type drm_lock_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_lock {
    pub context: ::std::os::raw::c_int,
    pub flags: drm_lock_flags,
}
#[test]
fn bindgen_test_layout_drm_lock() {
    assert_eq!(
        ::std::mem::size_of::<drm_lock>(),
        8usize,
        concat!("Size of: ", stringify!(drm_lock))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_lock>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_lock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_lock>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_lock),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_lock>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_lock),
            "::",
            stringify!(flags)
        )
    );
}
pub const drm_dma_flags__DRM_DMA_BLOCK: drm_dma_flags = 1;
pub const drm_dma_flags__DRM_DMA_WHILE_LOCKED: drm_dma_flags = 2;
pub const drm_dma_flags__DRM_DMA_PRIORITY: drm_dma_flags = 4;
pub const drm_dma_flags__DRM_DMA_WAIT: drm_dma_flags = 16;
pub const drm_dma_flags__DRM_DMA_SMALLER_OK: drm_dma_flags = 32;
pub const drm_dma_flags__DRM_DMA_LARGER_OK: drm_dma_flags = 64;
pub type drm_dma_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_desc {
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub low_mark: ::std::os::raw::c_int,
    pub high_mark: ::std::os::raw::c_int,
    pub flags: drm_buf_desc__bindgen_ty_1,
    pub agp_start: ::std::os::raw::c_ulong,
}
pub const drm_buf_desc__DRM_PAGE_ALIGN: ::std::os::raw::c_uint = 1;
pub const drm_buf_desc__DRM_AGP_BUFFER: ::std::os::raw::c_uint = 2;
pub const drm_buf_desc__DRM_SG_BUFFER: ::std::os::raw::c_uint = 4;
pub const drm_buf_desc__DRM_FB_BUFFER: ::std::os::raw::c_uint = 8;
pub const drm_buf_desc__DRM_PCI_BUFFER_RO: ::std::os::raw::c_uint = 16;
pub type drm_buf_desc__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_drm_buf_desc() {
    assert_eq!(
        ::std::mem::size_of::<drm_buf_desc>(),
        32usize,
        concat!("Size of: ", stringify!(drm_buf_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_buf_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_buf_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_desc>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_desc),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_desc>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_desc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_desc>())).low_mark as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_desc),
            "::",
            stringify!(low_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_desc>())).high_mark as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_desc),
            "::",
            stringify!(high_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_desc>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_desc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_desc>())).agp_start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_desc),
            "::",
            stringify!(agp_start)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_info {
    pub count: ::std::os::raw::c_int,
    pub list: *mut drm_buf_desc,
}
#[test]
fn bindgen_test_layout_drm_buf_info() {
    assert_eq!(
        ::std::mem::size_of::<drm_buf_info>(),
        16usize,
        concat!("Size of: ", stringify!(drm_buf_info))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_buf_info>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_buf_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_info>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_info),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_info>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_info),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_free {
    pub count: ::std::os::raw::c_int,
    pub list: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_drm_buf_free() {
    assert_eq!(
        ::std::mem::size_of::<drm_buf_free>(),
        16usize,
        concat!("Size of: ", stringify!(drm_buf_free))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_buf_free>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_buf_free))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_free>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_free),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_free>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_free),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_pub {
    pub idx: ::std::os::raw::c_int,
    pub total: ::std::os::raw::c_int,
    pub used: ::std::os::raw::c_int,
    pub address: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_drm_buf_pub() {
    assert_eq!(
        ::std::mem::size_of::<drm_buf_pub>(),
        24usize,
        concat!("Size of: ", stringify!(drm_buf_pub))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_buf_pub>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_buf_pub))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_pub>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_pub),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_pub>())).total as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_pub),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_pub>())).used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_pub),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_pub>())).address as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_pub),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_map {
    pub count: ::std::os::raw::c_int,
    pub virtual_: *mut ::std::os::raw::c_void,
    pub list: *mut drm_buf_pub,
}
#[test]
fn bindgen_test_layout_drm_buf_map() {
    assert_eq!(
        ::std::mem::size_of::<drm_buf_map>(),
        24usize,
        concat!("Size of: ", stringify!(drm_buf_map))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_buf_map>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_buf_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_map>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_map),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_map>())).virtual_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_map),
            "::",
            stringify!(virtual_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_buf_map>())).list as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_buf_map),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_dma {
    pub context: ::std::os::raw::c_int,
    pub send_count: ::std::os::raw::c_int,
    pub send_indices: *mut ::std::os::raw::c_int,
    pub send_sizes: *mut ::std::os::raw::c_int,
    pub flags: drm_dma_flags,
    pub request_count: ::std::os::raw::c_int,
    pub request_size: ::std::os::raw::c_int,
    pub request_indices: *mut ::std::os::raw::c_int,
    pub request_sizes: *mut ::std::os::raw::c_int,
    pub granted_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_drm_dma() {
    assert_eq!(
        ::std::mem::size_of::<drm_dma>(),
        64usize,
        concat!("Size of: ", stringify!(drm_dma))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_dma>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_dma))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).send_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(send_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).send_indices as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(send_indices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).send_sizes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(send_sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).request_count as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(request_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).request_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(request_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).request_indices as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(request_indices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).request_sizes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(request_sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_dma>())).granted_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_dma),
            "::",
            stringify!(granted_count)
        )
    );
}
pub const drm_ctx_flags__DRM_CONTEXT_PRESERVED: drm_ctx_flags = 1;
pub const drm_ctx_flags__DRM_CONTEXT_2DONLY: drm_ctx_flags = 2;
pub type drm_ctx_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx {
    pub handle: drm_context_t,
    pub flags: drm_ctx_flags,
}
#[test]
fn bindgen_test_layout_drm_ctx() {
    assert_eq!(
        ::std::mem::size_of::<drm_ctx>(),
        8usize,
        concat!("Size of: ", stringify!(drm_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_ctx>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_ctx>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_ctx),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_ctx>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_ctx),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx_res {
    pub count: ::std::os::raw::c_int,
    pub contexts: *mut drm_ctx,
}
#[test]
fn bindgen_test_layout_drm_ctx_res() {
    assert_eq!(
        ::std::mem::size_of::<drm_ctx_res>(),
        16usize,
        concat!("Size of: ", stringify!(drm_ctx_res))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_ctx_res>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_ctx_res))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_ctx_res>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_ctx_res),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_ctx_res>())).contexts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_ctx_res),
            "::",
            stringify!(contexts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_draw {
    pub handle: drm_drawable_t,
}
#[test]
fn bindgen_test_layout_drm_draw() {
    assert_eq!(
        ::std::mem::size_of::<drm_draw>(),
        4usize,
        concat!("Size of: ", stringify!(drm_draw))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_draw>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_draw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_draw>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_draw),
            "::",
            stringify!(handle)
        )
    );
}
pub const drm_drawable_info_type_t_DRM_DRAWABLE_CLIPRECTS: drm_drawable_info_type_t = 0;
pub type drm_drawable_info_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_update_draw {
    pub handle: drm_drawable_t,
    pub type_: ::std::os::raw::c_uint,
    pub num: ::std::os::raw::c_uint,
    pub data: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drm_update_draw() {
    assert_eq!(
        ::std::mem::size_of::<drm_update_draw>(),
        24usize,
        concat!("Size of: ", stringify!(drm_update_draw))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_update_draw>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_update_draw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_update_draw>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_update_draw),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_update_draw>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_update_draw),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_update_draw>())).num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_update_draw),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_update_draw>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_update_draw),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_auth {
    pub magic: drm_magic_t,
}
#[test]
fn bindgen_test_layout_drm_auth() {
    assert_eq!(
        ::std::mem::size_of::<drm_auth>(),
        4usize,
        concat!("Size of: ", stringify!(drm_auth))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_auth>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_auth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_auth>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_auth),
            "::",
            stringify!(magic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_irq_busid {
    pub irq: ::std::os::raw::c_int,
    pub busnum: ::std::os::raw::c_int,
    pub devnum: ::std::os::raw::c_int,
    pub funcnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_drm_irq_busid() {
    assert_eq!(
        ::std::mem::size_of::<drm_irq_busid>(),
        16usize,
        concat!("Size of: ", stringify!(drm_irq_busid))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_irq_busid>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_irq_busid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_irq_busid>())).irq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_irq_busid),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_irq_busid>())).busnum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_irq_busid),
            "::",
            stringify!(busnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_irq_busid>())).devnum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_irq_busid),
            "::",
            stringify!(devnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_irq_busid>())).funcnum as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_irq_busid),
            "::",
            stringify!(funcnum)
        )
    );
}
pub const drm_vblank_seq_type__DRM_VBLANK_ABSOLUTE: drm_vblank_seq_type = 0;
pub const drm_vblank_seq_type__DRM_VBLANK_RELATIVE: drm_vblank_seq_type = 1;
pub const drm_vblank_seq_type__DRM_VBLANK_HIGH_CRTC_MASK: drm_vblank_seq_type = 62;
pub const drm_vblank_seq_type__DRM_VBLANK_EVENT: drm_vblank_seq_type = 67108864;
pub const drm_vblank_seq_type__DRM_VBLANK_FLIP: drm_vblank_seq_type = 134217728;
pub const drm_vblank_seq_type__DRM_VBLANK_NEXTONMISS: drm_vblank_seq_type = 268435456;
pub const drm_vblank_seq_type__DRM_VBLANK_SECONDARY: drm_vblank_seq_type = 536870912;
pub const drm_vblank_seq_type__DRM_VBLANK_SIGNAL: drm_vblank_seq_type = 1073741824;
pub type drm_vblank_seq_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_wait_vblank_request {
    pub type_: drm_vblank_seq_type,
    pub sequence: ::std::os::raw::c_uint,
    pub signal: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_drm_wait_vblank_request() {
    assert_eq!(
        ::std::mem::size_of::<drm_wait_vblank_request>(),
        16usize,
        concat!("Size of: ", stringify!(drm_wait_vblank_request))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_wait_vblank_request>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_wait_vblank_request))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_wait_vblank_request>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank_request),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_wait_vblank_request>())).sequence as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank_request),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_wait_vblank_request>())).signal as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank_request),
            "::",
            stringify!(signal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_wait_vblank_reply {
    pub type_: drm_vblank_seq_type,
    pub sequence: ::std::os::raw::c_uint,
    pub tval_sec: ::std::os::raw::c_long,
    pub tval_usec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_drm_wait_vblank_reply() {
    assert_eq!(
        ::std::mem::size_of::<drm_wait_vblank_reply>(),
        24usize,
        concat!("Size of: ", stringify!(drm_wait_vblank_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_wait_vblank_reply>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_wait_vblank_reply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_wait_vblank_reply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank_reply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_wait_vblank_reply>())).sequence as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank_reply),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_wait_vblank_reply>())).tval_sec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank_reply),
            "::",
            stringify!(tval_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_wait_vblank_reply>())).tval_usec as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank_reply),
            "::",
            stringify!(tval_usec)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_wait_vblank {
    pub request: drm_wait_vblank_request,
    pub reply: drm_wait_vblank_reply,
}
#[test]
fn bindgen_test_layout_drm_wait_vblank() {
    assert_eq!(
        ::std::mem::size_of::<drm_wait_vblank>(),
        24usize,
        concat!("Size of: ", stringify!(drm_wait_vblank))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_wait_vblank>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_wait_vblank))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_wait_vblank>())).request as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_wait_vblank>())).reply as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_wait_vblank),
            "::",
            stringify!(reply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_modeset_ctl {
    pub crtc: __u32,
    pub cmd: __u32,
}
#[test]
fn bindgen_test_layout_drm_modeset_ctl() {
    assert_eq!(
        ::std::mem::size_of::<drm_modeset_ctl>(),
        8usize,
        concat!("Size of: ", stringify!(drm_modeset_ctl))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_modeset_ctl>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_modeset_ctl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_modeset_ctl>())).crtc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_modeset_ctl),
            "::",
            stringify!(crtc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_modeset_ctl>())).cmd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_modeset_ctl),
            "::",
            stringify!(cmd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_mode {
    pub mode: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_drm_agp_mode() {
    assert_eq!(
        ::std::mem::size_of::<drm_agp_mode>(),
        8usize,
        concat!("Size of: ", stringify!(drm_agp_mode))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_agp_mode>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_agp_mode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_mode>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_mode),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_buffer {
    pub size: ::std::os::raw::c_ulong,
    pub handle: ::std::os::raw::c_ulong,
    pub type_: ::std::os::raw::c_ulong,
    pub physical: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_drm_agp_buffer() {
    assert_eq!(
        ::std::mem::size_of::<drm_agp_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(drm_agp_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_agp_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_agp_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_buffer>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_buffer>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_buffer),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_buffer>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_buffer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_buffer>())).physical as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_buffer),
            "::",
            stringify!(physical)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_binding {
    pub handle: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_drm_agp_binding() {
    assert_eq!(
        ::std::mem::size_of::<drm_agp_binding>(),
        16usize,
        concat!("Size of: ", stringify!(drm_agp_binding))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_agp_binding>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_agp_binding))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_binding>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_binding),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_binding>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_binding),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_info {
    pub agp_version_major: ::std::os::raw::c_int,
    pub agp_version_minor: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_ulong,
    pub aperture_base: ::std::os::raw::c_ulong,
    pub aperture_size: ::std::os::raw::c_ulong,
    pub memory_allowed: ::std::os::raw::c_ulong,
    pub memory_used: ::std::os::raw::c_ulong,
    pub id_vendor: ::std::os::raw::c_ushort,
    pub id_device: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_drm_agp_info() {
    assert_eq!(
        ::std::mem::size_of::<drm_agp_info>(),
        56usize,
        concat!("Size of: ", stringify!(drm_agp_info))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_agp_info>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_agp_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).agp_version_major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(agp_version_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).agp_version_minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(agp_version_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).aperture_base as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(aperture_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).aperture_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(aperture_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).memory_allowed as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(memory_allowed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).memory_used as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(memory_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).id_vendor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(id_vendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_agp_info>())).id_device as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_agp_info),
            "::",
            stringify!(id_device)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_scatter_gather {
    pub size: ::std::os::raw::c_ulong,
    pub handle: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_drm_scatter_gather() {
    assert_eq!(
        ::std::mem::size_of::<drm_scatter_gather>(),
        16usize,
        concat!("Size of: ", stringify!(drm_scatter_gather))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_scatter_gather>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_scatter_gather))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_scatter_gather>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_scatter_gather),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_scatter_gather>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_scatter_gather),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_set_version {
    pub drm_di_major: ::std::os::raw::c_int,
    pub drm_di_minor: ::std::os::raw::c_int,
    pub drm_dd_major: ::std::os::raw::c_int,
    pub drm_dd_minor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_drm_set_version() {
    assert_eq!(
        ::std::mem::size_of::<drm_set_version>(),
        16usize,
        concat!("Size of: ", stringify!(drm_set_version))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_set_version>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_set_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_set_version>())).drm_di_major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_set_version),
            "::",
            stringify!(drm_di_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_set_version>())).drm_di_minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_set_version),
            "::",
            stringify!(drm_di_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_set_version>())).drm_dd_major as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_set_version),
            "::",
            stringify!(drm_dd_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_set_version>())).drm_dd_minor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_set_version),
            "::",
            stringify!(drm_dd_minor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_close {
    pub handle: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_gem_close() {
    assert_eq!(
        ::std::mem::size_of::<drm_gem_close>(),
        8usize,
        concat!("Size of: ", stringify!(drm_gem_close))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_gem_close>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_gem_close))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_close>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_close),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_close>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_close),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_flink {
    pub handle: __u32,
    pub name: __u32,
}
#[test]
fn bindgen_test_layout_drm_gem_flink() {
    assert_eq!(
        ::std::mem::size_of::<drm_gem_flink>(),
        8usize,
        concat!("Size of: ", stringify!(drm_gem_flink))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_gem_flink>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_gem_flink))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_flink>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_flink),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_flink>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_flink),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_open {
    pub name: __u32,
    pub handle: __u32,
    pub size: __u64,
}
#[test]
fn bindgen_test_layout_drm_gem_open() {
    assert_eq!(
        ::std::mem::size_of::<drm_gem_open>(),
        16usize,
        concat!("Size of: ", stringify!(drm_gem_open))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_gem_open>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_gem_open))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_open>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_open),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_open>())).handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_open),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_open>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_open),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_get_cap {
    pub capability: __u64,
    pub value: __u64,
}
#[test]
fn bindgen_test_layout_drm_get_cap() {
    assert_eq!(
        ::std::mem::size_of::<drm_get_cap>(),
        16usize,
        concat!("Size of: ", stringify!(drm_get_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_get_cap>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_get_cap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_get_cap>())).capability as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_get_cap),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_get_cap>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_get_cap),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_set_client_cap {
    pub capability: __u64,
    pub value: __u64,
}
#[test]
fn bindgen_test_layout_drm_set_client_cap() {
    assert_eq!(
        ::std::mem::size_of::<drm_set_client_cap>(),
        16usize,
        concat!("Size of: ", stringify!(drm_set_client_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_set_client_cap>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_set_client_cap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_set_client_cap>())).capability as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_set_client_cap),
            "::",
            stringify!(capability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_set_client_cap>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_set_client_cap),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_prime_handle {
    pub handle: __u32,
    pub flags: __u32,
    pub fd: __s32,
}
#[test]
fn bindgen_test_layout_drm_prime_handle() {
    assert_eq!(
        ::std::mem::size_of::<drm_prime_handle>(),
        12usize,
        concat!("Size of: ", stringify!(drm_prime_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_prime_handle>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_prime_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_prime_handle>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_prime_handle),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_prime_handle>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_prime_handle),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_prime_handle>())).fd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_prime_handle),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_create {
    pub handle: __u32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_create() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_create>(),
        8usize,
        concat!("Size of: ", stringify!(drm_syncobj_create))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_create>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_syncobj_create))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_create>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_create),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_create>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_create),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_destroy {
    pub handle: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_destroy() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_destroy>(),
        8usize,
        concat!("Size of: ", stringify!(drm_syncobj_destroy))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_destroy>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_syncobj_destroy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_destroy>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_destroy),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_destroy>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_destroy),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_handle {
    pub handle: __u32,
    pub flags: __u32,
    pub fd: __s32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_handle() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_handle>(),
        16usize,
        concat!("Size of: ", stringify!(drm_syncobj_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_handle>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_syncobj_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_handle>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_handle),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_handle>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_handle),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_handle>())).fd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_handle),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_handle>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_handle),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_transfer {
    pub src_handle: __u32,
    pub dst_handle: __u32,
    pub src_point: __u64,
    pub dst_point: __u64,
    pub flags: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_transfer() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_transfer>(),
        32usize,
        concat!("Size of: ", stringify!(drm_syncobj_transfer))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_transfer>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_syncobj_transfer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_transfer>())).src_handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_transfer),
            "::",
            stringify!(src_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_transfer>())).dst_handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_transfer),
            "::",
            stringify!(dst_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_transfer>())).src_point as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_transfer),
            "::",
            stringify!(src_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_transfer>())).dst_point as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_transfer),
            "::",
            stringify!(dst_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_transfer>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_transfer),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_transfer>())).pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_transfer),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_wait {
    pub handles: __u64,
    pub timeout_nsec: __s64,
    pub count_handles: __u32,
    pub flags: __u32,
    pub first_signaled: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_wait() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_wait>(),
        32usize,
        concat!("Size of: ", stringify!(drm_syncobj_wait))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_wait>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_syncobj_wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).handles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).timeout_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(timeout_nsec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).count_handles as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(count_handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).first_signaled as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(first_signaled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_timeline_wait {
    pub handles: __u64,
    pub points: __u64,
    pub timeout_nsec: __s64,
    pub count_handles: __u32,
    pub flags: __u32,
    pub first_signaled: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_timeline_wait() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_timeline_wait>(),
        40usize,
        concat!("Size of: ", stringify!(drm_syncobj_timeline_wait))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_timeline_wait>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_syncobj_timeline_wait))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_wait>())).handles as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_wait),
            "::",
            stringify!(handles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_wait>())).points as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_wait),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_wait>())).timeout_nsec as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_wait),
            "::",
            stringify!(timeout_nsec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_wait>())).count_handles as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_wait),
            "::",
            stringify!(count_handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_timeline_wait>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_wait),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_wait>())).first_signaled as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_wait),
            "::",
            stringify!(first_signaled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_timeline_wait>())).pad as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_wait),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_array {
    pub handles: __u64,
    pub count_handles: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_array() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_array>(),
        16usize,
        concat!("Size of: ", stringify!(drm_syncobj_array))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_array>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_syncobj_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_array>())).handles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_array),
            "::",
            stringify!(handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_array>())).count_handles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_array),
            "::",
            stringify!(count_handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_array>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_array),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_timeline_array {
    pub handles: __u64,
    pub points: __u64,
    pub count_handles: __u32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_timeline_array() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_timeline_array>(),
        24usize,
        concat!("Size of: ", stringify!(drm_syncobj_timeline_array))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_timeline_array>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_syncobj_timeline_array))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_array>())).handles as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_array),
            "::",
            stringify!(handles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_array>())).points as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_array),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_array>())).count_handles as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_array),
            "::",
            stringify!(count_handles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_syncobj_timeline_array>())).flags as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_timeline_array),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_crtc_get_sequence {
    pub crtc_id: __u32,
    pub active: __u32,
    pub sequence: __u64,
    pub sequence_ns: __s64,
}
#[test]
fn bindgen_test_layout_drm_crtc_get_sequence() {
    assert_eq!(
        ::std::mem::size_of::<drm_crtc_get_sequence>(),
        24usize,
        concat!("Size of: ", stringify!(drm_crtc_get_sequence))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_crtc_get_sequence>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_crtc_get_sequence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_crtc_get_sequence>())).crtc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_crtc_get_sequence),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_crtc_get_sequence>())).active as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_crtc_get_sequence),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_crtc_get_sequence>())).sequence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_crtc_get_sequence),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_crtc_get_sequence>())).sequence_ns as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_crtc_get_sequence),
            "::",
            stringify!(sequence_ns)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_crtc_queue_sequence {
    pub crtc_id: __u32,
    pub flags: __u32,
    pub sequence: __u64,
    pub user_data: __u64,
}
#[test]
fn bindgen_test_layout_drm_crtc_queue_sequence() {
    assert_eq!(
        ::std::mem::size_of::<drm_crtc_queue_sequence>(),
        24usize,
        concat!("Size of: ", stringify!(drm_crtc_queue_sequence))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_crtc_queue_sequence>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_crtc_queue_sequence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_crtc_queue_sequence>())).crtc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_crtc_queue_sequence),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_crtc_queue_sequence>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_crtc_queue_sequence),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_crtc_queue_sequence>())).sequence as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_crtc_queue_sequence),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_crtc_queue_sequence>())).user_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_crtc_queue_sequence),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_modeinfo {
    pub clock: __u32,
    pub hdisplay: __u16,
    pub hsync_start: __u16,
    pub hsync_end: __u16,
    pub htotal: __u16,
    pub hskew: __u16,
    pub vdisplay: __u16,
    pub vsync_start: __u16,
    pub vsync_end: __u16,
    pub vtotal: __u16,
    pub vscan: __u16,
    pub vrefresh: __u32,
    pub flags: __u32,
    pub type_: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_drm_mode_modeinfo() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_modeinfo>(),
        68usize,
        concat!("Size of: ", stringify!(drm_mode_modeinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_modeinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_modeinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).clock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).hdisplay as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(hdisplay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).hsync_start as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(hsync_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).hsync_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(hsync_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).htotal as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(htotal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).hskew as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(hskew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).vdisplay as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(vdisplay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).vsync_start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(vsync_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).vsync_end as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(vsync_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).vtotal as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(vtotal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).vscan as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(vscan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).vrefresh as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(vrefresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_modeinfo>())).name as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_modeinfo),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_card_res {
    pub fb_id_ptr: __u64,
    pub crtc_id_ptr: __u64,
    pub connector_id_ptr: __u64,
    pub encoder_id_ptr: __u64,
    pub count_fbs: __u32,
    pub count_crtcs: __u32,
    pub count_connectors: __u32,
    pub count_encoders: __u32,
    pub min_width: __u32,
    pub max_width: __u32,
    pub min_height: __u32,
    pub max_height: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_card_res() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_card_res>(),
        64usize,
        concat!("Size of: ", stringify!(drm_mode_card_res))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_card_res>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_card_res))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_card_res>())).fb_id_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(fb_id_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_card_res>())).crtc_id_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(crtc_id_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_card_res>())).connector_id_ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(connector_id_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_card_res>())).encoder_id_ptr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(encoder_id_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_card_res>())).count_fbs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(count_fbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_card_res>())).count_crtcs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(count_crtcs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_card_res>())).count_connectors as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(count_connectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_card_res>())).count_encoders as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(count_encoders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_card_res>())).min_width as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(min_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_card_res>())).max_width as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(max_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_card_res>())).min_height as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(min_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_card_res>())).max_height as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_card_res),
            "::",
            stringify!(max_height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc {
    pub set_connectors_ptr: __u64,
    pub count_connectors: __u32,
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub x: __u32,
    pub y: __u32,
    pub gamma_size: __u32,
    pub mode_valid: __u32,
    pub mode: drm_mode_modeinfo,
}
#[test]
fn bindgen_test_layout_drm_mode_crtc() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_crtc>(),
        104usize,
        concat!("Size of: ", stringify!(drm_mode_crtc))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_crtc>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_crtc))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_crtc>())).set_connectors_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(set_connectors_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc>())).count_connectors as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(count_connectors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc>())).crtc_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc>())).fb_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(fb_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc>())).x as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc>())).y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc>())).gamma_size as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(gamma_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc>())).mode_valid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(mode_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc>())).mode as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_set_plane {
    pub plane_id: __u32,
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub flags: __u32,
    pub crtc_x: __s32,
    pub crtc_y: __s32,
    pub crtc_w: __u32,
    pub crtc_h: __u32,
    pub src_x: __u32,
    pub src_y: __u32,
    pub src_h: __u32,
    pub src_w: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_set_plane() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_set_plane>(),
        48usize,
        concat!("Size of: ", stringify!(drm_mode_set_plane))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_set_plane>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_set_plane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).plane_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(plane_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).crtc_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).fb_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(fb_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).crtc_x as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(crtc_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).crtc_y as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(crtc_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).crtc_w as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(crtc_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).crtc_h as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(crtc_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).src_x as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(src_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).src_y as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(src_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).src_h as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(src_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_set_plane>())).src_w as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_set_plane),
            "::",
            stringify!(src_w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_plane {
    pub plane_id: __u32,
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub possible_crtcs: __u32,
    pub gamma_size: __u32,
    pub count_format_types: __u32,
    pub format_type_ptr: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_get_plane() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_get_plane>(),
        32usize,
        concat!("Size of: ", stringify!(drm_mode_get_plane))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_get_plane>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_get_plane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_plane>())).plane_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane),
            "::",
            stringify!(plane_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_plane>())).crtc_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_plane>())).fb_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane),
            "::",
            stringify!(fb_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_plane>())).possible_crtcs as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane),
            "::",
            stringify!(possible_crtcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_plane>())).gamma_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane),
            "::",
            stringify!(gamma_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_plane>())).count_format_types as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane),
            "::",
            stringify!(count_format_types)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_plane>())).format_type_ptr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane),
            "::",
            stringify!(format_type_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_plane_res {
    pub plane_id_ptr: __u64,
    pub count_planes: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_get_plane_res() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_get_plane_res>(),
        16usize,
        concat!("Size of: ", stringify!(drm_mode_get_plane_res))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_get_plane_res>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_get_plane_res))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_plane_res>())).plane_id_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane_res),
            "::",
            stringify!(plane_id_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_plane_res>())).count_planes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_plane_res),
            "::",
            stringify!(count_planes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_encoder {
    pub encoder_id: __u32,
    pub encoder_type: __u32,
    pub crtc_id: __u32,
    pub possible_crtcs: __u32,
    pub possible_clones: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_get_encoder() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_get_encoder>(),
        20usize,
        concat!("Size of: ", stringify!(drm_mode_get_encoder))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_get_encoder>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_get_encoder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_encoder>())).encoder_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_encoder),
            "::",
            stringify!(encoder_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_encoder>())).encoder_type as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_encoder),
            "::",
            stringify!(encoder_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_encoder>())).crtc_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_encoder),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_encoder>())).possible_crtcs as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_encoder),
            "::",
            stringify!(possible_crtcs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_encoder>())).possible_clones as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_encoder),
            "::",
            stringify!(possible_clones)
        )
    );
}
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Automatic: drm_mode_subconnector = 0;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Unknown: drm_mode_subconnector = 0;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_VGA: drm_mode_subconnector = 1;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_DVID: drm_mode_subconnector = 3;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_DVIA: drm_mode_subconnector = 4;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Composite: drm_mode_subconnector = 5;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_SVIDEO: drm_mode_subconnector = 6;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Component: drm_mode_subconnector = 8;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_SCART: drm_mode_subconnector = 9;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_DisplayPort: drm_mode_subconnector = 10;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_HDMIA: drm_mode_subconnector = 11;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Native: drm_mode_subconnector = 15;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Wireless: drm_mode_subconnector = 18;
pub type drm_mode_subconnector = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_connector {
    pub encoders_ptr: __u64,
    pub modes_ptr: __u64,
    pub props_ptr: __u64,
    pub prop_values_ptr: __u64,
    pub count_modes: __u32,
    pub count_props: __u32,
    pub count_encoders: __u32,
    pub encoder_id: __u32,
    pub connector_id: __u32,
    pub connector_type: __u32,
    pub connector_type_id: __u32,
    pub connection: __u32,
    pub mm_width: __u32,
    pub mm_height: __u32,
    pub subpixel: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_get_connector() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_get_connector>(),
        80usize,
        concat!("Size of: ", stringify!(drm_mode_get_connector))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_get_connector>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_get_connector))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).encoders_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(encoders_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).modes_ptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(modes_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).props_ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(props_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).prop_values_ptr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(prop_values_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).count_modes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(count_modes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).count_props as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(count_props)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).count_encoders as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(count_encoders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).encoder_id as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(encoder_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).connector_id as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(connector_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).connector_type as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(connector_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).connector_type_id as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(connector_type_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).connection as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_connector>())).mm_width as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(mm_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_connector>())).mm_height as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(mm_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_connector>())).subpixel as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(subpixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_connector>())).pad as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_connector),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_property_enum {
    pub value: __u64,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_drm_mode_property_enum() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_property_enum>(),
        40usize,
        concat!("Size of: ", stringify!(drm_mode_property_enum))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_property_enum>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_property_enum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_property_enum>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_property_enum),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_property_enum>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_property_enum),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_property {
    pub values_ptr: __u64,
    pub enum_blob_ptr: __u64,
    pub prop_id: __u32,
    pub flags: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
    pub count_values: __u32,
    pub count_enum_blobs: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_get_property() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_get_property>(),
        64usize,
        concat!("Size of: ", stringify!(drm_mode_get_property))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_get_property>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_get_property))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_property>())).values_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_property),
            "::",
            stringify!(values_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_property>())).enum_blob_ptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_property),
            "::",
            stringify!(enum_blob_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_property>())).prop_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_property),
            "::",
            stringify!(prop_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_property>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_property),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_property>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_property),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_property>())).count_values as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_property),
            "::",
            stringify!(count_values)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_property>())).count_enum_blobs as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_property),
            "::",
            stringify!(count_enum_blobs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_connector_set_property {
    pub value: __u64,
    pub prop_id: __u32,
    pub connector_id: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_connector_set_property() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_connector_set_property>(),
        16usize,
        concat!("Size of: ", stringify!(drm_mode_connector_set_property))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_connector_set_property>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_connector_set_property))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_connector_set_property>())).value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_connector_set_property),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_connector_set_property>())).prop_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_connector_set_property),
            "::",
            stringify!(prop_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_connector_set_property>())).connector_id as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_connector_set_property),
            "::",
            stringify!(connector_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_obj_get_properties {
    pub props_ptr: __u64,
    pub prop_values_ptr: __u64,
    pub count_props: __u32,
    pub obj_id: __u32,
    pub obj_type: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_obj_get_properties() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_obj_get_properties>(),
        32usize,
        concat!("Size of: ", stringify!(drm_mode_obj_get_properties))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_obj_get_properties>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_obj_get_properties))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_obj_get_properties>())).props_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_get_properties),
            "::",
            stringify!(props_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_obj_get_properties>())).prop_values_ptr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_get_properties),
            "::",
            stringify!(prop_values_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_obj_get_properties>())).count_props as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_get_properties),
            "::",
            stringify!(count_props)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_obj_get_properties>())).obj_id as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_get_properties),
            "::",
            stringify!(obj_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_obj_get_properties>())).obj_type as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_get_properties),
            "::",
            stringify!(obj_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_obj_set_property {
    pub value: __u64,
    pub prop_id: __u32,
    pub obj_id: __u32,
    pub obj_type: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_obj_set_property() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_obj_set_property>(),
        24usize,
        concat!("Size of: ", stringify!(drm_mode_obj_set_property))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_obj_set_property>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_obj_set_property))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_obj_set_property>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_set_property),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_obj_set_property>())).prop_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_set_property),
            "::",
            stringify!(prop_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_obj_set_property>())).obj_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_set_property),
            "::",
            stringify!(obj_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_obj_set_property>())).obj_type as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_obj_set_property),
            "::",
            stringify!(obj_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_blob {
    pub blob_id: __u32,
    pub length: __u32,
    pub data: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_get_blob() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_get_blob>(),
        16usize,
        concat!("Size of: ", stringify!(drm_mode_get_blob))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_get_blob>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_get_blob))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_blob>())).blob_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_blob),
            "::",
            stringify!(blob_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_blob>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_blob),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_blob>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_blob),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_cmd {
    pub fb_id: __u32,
    pub width: __u32,
    pub height: __u32,
    pub pitch: __u32,
    pub bpp: __u32,
    pub depth: __u32,
    pub handle: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_fb_cmd() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_fb_cmd>(),
        28usize,
        concat!("Size of: ", stringify!(drm_mode_fb_cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_fb_cmd>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_fb_cmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd>())).fb_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd),
            "::",
            stringify!(fb_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd>())).pitch as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd>())).bpp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd>())).depth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd>())).handle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_cmd2 {
    pub fb_id: __u32,
    pub width: __u32,
    pub height: __u32,
    pub pixel_format: __u32,
    pub flags: __u32,
    pub handles: [__u32; 4usize],
    pub pitches: [__u32; 4usize],
    pub offsets: [__u32; 4usize],
    pub modifier: [__u64; 4usize],
}
#[test]
fn bindgen_test_layout_drm_mode_fb_cmd2() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_fb_cmd2>(),
        104usize,
        concat!("Size of: ", stringify!(drm_mode_fb_cmd2))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_fb_cmd2>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_fb_cmd2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).fb_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(fb_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).pixel_format as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(pixel_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).handles as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).pitches as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(pitches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).offsets as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_cmd2>())).modifier as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_cmd2),
            "::",
            stringify!(modifier)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_dirty_cmd {
    pub fb_id: __u32,
    pub flags: __u32,
    pub color: __u32,
    pub num_clips: __u32,
    pub clips_ptr: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_fb_dirty_cmd() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_fb_dirty_cmd>(),
        24usize,
        concat!("Size of: ", stringify!(drm_mode_fb_dirty_cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_fb_dirty_cmd>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_fb_dirty_cmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_dirty_cmd>())).fb_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_dirty_cmd),
            "::",
            stringify!(fb_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_dirty_cmd>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_dirty_cmd),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_dirty_cmd>())).color as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_dirty_cmd),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_dirty_cmd>())).num_clips as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_dirty_cmd),
            "::",
            stringify!(num_clips)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_fb_dirty_cmd>())).clips_ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_fb_dirty_cmd),
            "::",
            stringify!(clips_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_mode_cmd {
    pub connector_id: __u32,
    pub mode: drm_mode_modeinfo,
}
#[test]
fn bindgen_test_layout_drm_mode_mode_cmd() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_mode_cmd>(),
        72usize,
        concat!("Size of: ", stringify!(drm_mode_mode_cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_mode_cmd>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_mode_cmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_mode_cmd>())).connector_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_mode_cmd),
            "::",
            stringify!(connector_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_mode_cmd>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_mode_cmd),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_cursor {
    pub flags: __u32,
    pub crtc_id: __u32,
    pub x: __s32,
    pub y: __s32,
    pub width: __u32,
    pub height: __u32,
    pub handle: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_cursor() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_cursor>(),
        28usize,
        concat!("Size of: ", stringify!(drm_mode_cursor))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_cursor>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_cursor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor>())).crtc_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor>())).height as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor>())).handle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_cursor2 {
    pub flags: __u32,
    pub crtc_id: __u32,
    pub x: __s32,
    pub y: __s32,
    pub width: __u32,
    pub height: __u32,
    pub handle: __u32,
    pub hot_x: __s32,
    pub hot_y: __s32,
}
#[test]
fn bindgen_test_layout_drm_mode_cursor2() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_cursor2>(),
        36usize,
        concat!("Size of: ", stringify!(drm_mode_cursor2))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_cursor2>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_cursor2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).crtc_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).height as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).handle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).hot_x as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(hot_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_cursor2>())).hot_y as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_cursor2),
            "::",
            stringify!(hot_y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_lut {
    pub crtc_id: __u32,
    pub gamma_size: __u32,
    pub red: __u64,
    pub green: __u64,
    pub blue: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_crtc_lut() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_crtc_lut>(),
        32usize,
        concat!("Size of: ", stringify!(drm_mode_crtc_lut))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_crtc_lut>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_crtc_lut))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc_lut>())).crtc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_lut),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc_lut>())).gamma_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_lut),
            "::",
            stringify!(gamma_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc_lut>())).red as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_lut),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc_lut>())).green as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_lut),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc_lut>())).blue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_lut),
            "::",
            stringify!(blue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_color_ctm {
    pub matrix: [__u64; 9usize],
}
#[test]
fn bindgen_test_layout_drm_color_ctm() {
    assert_eq!(
        ::std::mem::size_of::<drm_color_ctm>(),
        72usize,
        concat!("Size of: ", stringify!(drm_color_ctm))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_color_ctm>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_color_ctm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_color_ctm>())).matrix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_color_ctm),
            "::",
            stringify!(matrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_color_lut {
    pub red: __u16,
    pub green: __u16,
    pub blue: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_drm_color_lut() {
    assert_eq!(
        ::std::mem::size_of::<drm_color_lut>(),
        8usize,
        concat!("Size of: ", stringify!(drm_color_lut))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_color_lut>(),
        2usize,
        concat!("Alignment of ", stringify!(drm_color_lut))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_color_lut>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_color_lut),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_color_lut>())).green as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_color_lut),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_color_lut>())).blue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_color_lut),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_color_lut>())).reserved as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_color_lut),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe {
    pub eotf: __u8,
    pub metadata_type: __u8,
    pub display_primaries: [hdr_metadata_infoframe__bindgen_ty_1; 3usize],
    pub white_point: hdr_metadata_infoframe__bindgen_ty_2,
    pub max_display_mastering_luminance: __u16,
    pub min_display_mastering_luminance: __u16,
    pub max_cll: __u16,
    pub max_fall: __u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe__bindgen_ty_1 {
    pub x: __u16,
    pub y: __u16,
}
#[test]
fn bindgen_test_layout_hdr_metadata_infoframe__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hdr_metadata_infoframe__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(hdr_metadata_infoframe__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<hdr_metadata_infoframe__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(hdr_metadata_infoframe__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe__bindgen_ty_1>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe__bindgen_ty_1>())).y as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe__bindgen_ty_2 {
    pub x: __u16,
    pub y: __u16,
}
#[test]
fn bindgen_test_layout_hdr_metadata_infoframe__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<hdr_metadata_infoframe__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(hdr_metadata_infoframe__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<hdr_metadata_infoframe__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(hdr_metadata_infoframe__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe__bindgen_ty_2>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe__bindgen_ty_2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe__bindgen_ty_2>())).y as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe__bindgen_ty_2),
            "::",
            stringify!(y)
        )
    );
}
#[test]
fn bindgen_test_layout_hdr_metadata_infoframe() {
    assert_eq!(
        ::std::mem::size_of::<hdr_metadata_infoframe>(),
        26usize,
        concat!("Size of: ", stringify!(hdr_metadata_infoframe))
    );
    assert_eq!(
        ::std::mem::align_of::<hdr_metadata_infoframe>(),
        2usize,
        concat!("Alignment of ", stringify!(hdr_metadata_infoframe))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hdr_metadata_infoframe>())).eotf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe),
            "::",
            stringify!(eotf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe>())).metadata_type as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe),
            "::",
            stringify!(metadata_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe>())).display_primaries as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe),
            "::",
            stringify!(display_primaries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe>())).white_point as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe),
            "::",
            stringify!(white_point)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe>())).max_display_mastering_luminance
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe),
            "::",
            stringify!(max_display_mastering_luminance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_metadata_infoframe>())).min_display_mastering_luminance
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe),
            "::",
            stringify!(min_display_mastering_luminance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hdr_metadata_infoframe>())).max_cll as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe),
            "::",
            stringify!(max_cll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hdr_metadata_infoframe>())).max_fall as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_metadata_infoframe),
            "::",
            stringify!(max_fall)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hdr_output_metadata {
    pub metadata_type: __u32,
    pub __bindgen_anon_1: hdr_output_metadata__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hdr_output_metadata__bindgen_ty_1 {
    pub hdmi_metadata_type1: hdr_metadata_infoframe,
}
#[test]
fn bindgen_test_layout_hdr_output_metadata__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hdr_output_metadata__bindgen_ty_1>(),
        26usize,
        concat!("Size of: ", stringify!(hdr_output_metadata__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hdr_output_metadata__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(hdr_output_metadata__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_output_metadata__bindgen_ty_1>())).hdmi_metadata_type1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_output_metadata__bindgen_ty_1),
            "::",
            stringify!(hdmi_metadata_type1)
        )
    );
}
#[test]
fn bindgen_test_layout_hdr_output_metadata() {
    assert_eq!(
        ::std::mem::size_of::<hdr_output_metadata>(),
        32usize,
        concat!("Size of: ", stringify!(hdr_output_metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<hdr_output_metadata>(),
        4usize,
        concat!("Alignment of ", stringify!(hdr_output_metadata))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hdr_output_metadata>())).metadata_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hdr_output_metadata),
            "::",
            stringify!(metadata_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_page_flip {
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub flags: __u32,
    pub reserved: __u32,
    pub user_data: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_crtc_page_flip() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_crtc_page_flip>(),
        24usize,
        concat!("Size of: ", stringify!(drm_mode_crtc_page_flip))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_crtc_page_flip>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_crtc_page_flip))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc_page_flip>())).crtc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc_page_flip>())).fb_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip),
            "::",
            stringify!(fb_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_crtc_page_flip>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_crtc_page_flip>())).reserved as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_crtc_page_flip>())).user_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_page_flip_target {
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub flags: __u32,
    pub sequence: __u32,
    pub user_data: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_crtc_page_flip_target() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_crtc_page_flip_target>(),
        24usize,
        concat!("Size of: ", stringify!(drm_mode_crtc_page_flip_target))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_crtc_page_flip_target>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_crtc_page_flip_target))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_crtc_page_flip_target>())).crtc_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip_target),
            "::",
            stringify!(crtc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_crtc_page_flip_target>())).fb_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip_target),
            "::",
            stringify!(fb_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_crtc_page_flip_target>())).flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip_target),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_crtc_page_flip_target>())).sequence as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip_target),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_crtc_page_flip_target>())).user_data as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_crtc_page_flip_target),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_dumb {
    pub height: __u32,
    pub width: __u32,
    pub bpp: __u32,
    pub flags: __u32,
    pub handle: __u32,
    pub pitch: __u32,
    pub size: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_create_dumb() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_create_dumb>(),
        32usize,
        concat!("Size of: ", stringify!(drm_mode_create_dumb))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_create_dumb>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_create_dumb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_dumb>())).height as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_dumb),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_dumb>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_dumb),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_dumb>())).bpp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_dumb),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_dumb>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_dumb),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_dumb>())).handle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_dumb),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_dumb>())).pitch as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_dumb),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_dumb>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_dumb),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_map_dumb {
    pub handle: __u32,
    pub pad: __u32,
    pub offset: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_map_dumb() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_map_dumb>(),
        16usize,
        concat!("Size of: ", stringify!(drm_mode_map_dumb))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_map_dumb>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_map_dumb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_map_dumb>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_map_dumb),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_map_dumb>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_map_dumb),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_map_dumb>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_map_dumb),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_destroy_dumb {
    pub handle: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_destroy_dumb() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_destroy_dumb>(),
        4usize,
        concat!("Size of: ", stringify!(drm_mode_destroy_dumb))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_destroy_dumb>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_destroy_dumb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_destroy_dumb>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_destroy_dumb),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_atomic {
    pub flags: __u32,
    pub count_objs: __u32,
    pub objs_ptr: __u64,
    pub count_props_ptr: __u64,
    pub props_ptr: __u64,
    pub prop_values_ptr: __u64,
    pub reserved: __u64,
    pub user_data: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_atomic() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_atomic>(),
        56usize,
        concat!("Size of: ", stringify!(drm_mode_atomic))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_atomic>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_atomic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_atomic>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_atomic),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_atomic>())).count_objs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_atomic),
            "::",
            stringify!(count_objs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_atomic>())).objs_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_atomic),
            "::",
            stringify!(objs_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_atomic>())).count_props_ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_atomic),
            "::",
            stringify!(count_props_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_atomic>())).props_ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_atomic),
            "::",
            stringify!(props_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_atomic>())).prop_values_ptr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_atomic),
            "::",
            stringify!(prop_values_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_atomic>())).reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_atomic),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_atomic>())).user_data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_atomic),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_format_modifier_blob {
    pub version: __u32,
    pub flags: __u32,
    pub count_formats: __u32,
    pub formats_offset: __u32,
    pub count_modifiers: __u32,
    pub modifiers_offset: __u32,
}
#[test]
fn bindgen_test_layout_drm_format_modifier_blob() {
    assert_eq!(
        ::std::mem::size_of::<drm_format_modifier_blob>(),
        24usize,
        concat!("Size of: ", stringify!(drm_format_modifier_blob))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_format_modifier_blob>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_format_modifier_blob))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_format_modifier_blob>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier_blob),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_format_modifier_blob>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier_blob),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_format_modifier_blob>())).count_formats as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier_blob),
            "::",
            stringify!(count_formats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_format_modifier_blob>())).formats_offset as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier_blob),
            "::",
            stringify!(formats_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_format_modifier_blob>())).count_modifiers as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier_blob),
            "::",
            stringify!(count_modifiers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_format_modifier_blob>())).modifiers_offset as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier_blob),
            "::",
            stringify!(modifiers_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_format_modifier {
    pub formats: __u64,
    pub offset: __u32,
    pub pad: __u32,
    pub modifier: __u64,
}
#[test]
fn bindgen_test_layout_drm_format_modifier() {
    assert_eq!(
        ::std::mem::size_of::<drm_format_modifier>(),
        24usize,
        concat!("Size of: ", stringify!(drm_format_modifier))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_format_modifier>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_format_modifier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_format_modifier>())).formats as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier),
            "::",
            stringify!(formats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_format_modifier>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_format_modifier>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_format_modifier>())).modifier as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_format_modifier),
            "::",
            stringify!(modifier)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_blob {
    pub data: __u64,
    pub length: __u32,
    pub blob_id: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_create_blob() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_create_blob>(),
        16usize,
        concat!("Size of: ", stringify!(drm_mode_create_blob))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_create_blob>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_create_blob))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_blob>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_blob),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_blob>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_blob),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_blob>())).blob_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_blob),
            "::",
            stringify!(blob_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_destroy_blob {
    pub blob_id: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_destroy_blob() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_destroy_blob>(),
        4usize,
        concat!("Size of: ", stringify!(drm_mode_destroy_blob))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_destroy_blob>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_destroy_blob))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_destroy_blob>())).blob_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_destroy_blob),
            "::",
            stringify!(blob_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_lease {
    pub object_ids: __u64,
    pub object_count: __u32,
    pub flags: __u32,
    pub lessee_id: __u32,
    pub fd: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_create_lease() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_create_lease>(),
        24usize,
        concat!("Size of: ", stringify!(drm_mode_create_lease))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_create_lease>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_create_lease))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_create_lease>())).object_ids as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_lease),
            "::",
            stringify!(object_ids)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_create_lease>())).object_count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_lease),
            "::",
            stringify!(object_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_lease>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_lease),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_lease>())).lessee_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_lease),
            "::",
            stringify!(lessee_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_create_lease>())).fd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_create_lease),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_list_lessees {
    pub count_lessees: __u32,
    pub pad: __u32,
    pub lessees_ptr: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_list_lessees() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_list_lessees>(),
        16usize,
        concat!("Size of: ", stringify!(drm_mode_list_lessees))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_list_lessees>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_list_lessees))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_list_lessees>())).count_lessees as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_list_lessees),
            "::",
            stringify!(count_lessees)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_list_lessees>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_list_lessees),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_list_lessees>())).lessees_ptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_list_lessees),
            "::",
            stringify!(lessees_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_lease {
    pub count_objects: __u32,
    pub pad: __u32,
    pub objects_ptr: __u64,
}
#[test]
fn bindgen_test_layout_drm_mode_get_lease() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_get_lease>(),
        16usize,
        concat!("Size of: ", stringify!(drm_mode_get_lease))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_get_lease>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_mode_get_lease))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_mode_get_lease>())).count_objects as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_lease),
            "::",
            stringify!(count_objects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_lease>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_lease),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_get_lease>())).objects_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_get_lease),
            "::",
            stringify!(objects_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_revoke_lease {
    pub lessee_id: __u32,
}
#[test]
fn bindgen_test_layout_drm_mode_revoke_lease() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_revoke_lease>(),
        4usize,
        concat!("Size of: ", stringify!(drm_mode_revoke_lease))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_revoke_lease>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_revoke_lease))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_revoke_lease>())).lessee_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_revoke_lease),
            "::",
            stringify!(lessee_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_rect {
    pub x1: __s32,
    pub y1: __s32,
    pub x2: __s32,
    pub y2: __s32,
}
#[test]
fn bindgen_test_layout_drm_mode_rect() {
    assert_eq!(
        ::std::mem::size_of::<drm_mode_rect>(),
        16usize,
        concat!("Size of: ", stringify!(drm_mode_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_mode_rect>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_mode_rect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_rect>())).x1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_rect),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_rect>())).y1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_rect),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_rect>())).x2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_rect),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_mode_rect>())).y2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_mode_rect),
            "::",
            stringify!(y2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event {
    pub type_: __u32,
    pub length: __u32,
}
#[test]
fn bindgen_test_layout_drm_event() {
    assert_eq!(
        ::std::mem::size_of::<drm_event>(),
        8usize,
        concat!("Size of: ", stringify!(drm_event))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_event>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event_vblank {
    pub base: drm_event,
    pub user_data: __u64,
    pub tv_sec: __u32,
    pub tv_usec: __u32,
    pub sequence: __u32,
    pub crtc_id: __u32,
}
#[test]
fn bindgen_test_layout_drm_event_vblank() {
    assert_eq!(
        ::std::mem::size_of::<drm_event_vblank>(),
        32usize,
        concat!("Size of: ", stringify!(drm_event_vblank))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_event_vblank>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_event_vblank))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event_vblank>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_vblank),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event_vblank>())).user_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_vblank),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event_vblank>())).tv_sec as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_vblank),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event_vblank>())).tv_usec as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_vblank),
            "::",
            stringify!(tv_usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event_vblank>())).sequence as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_vblank),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event_vblank>())).crtc_id as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_vblank),
            "::",
            stringify!(crtc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event_crtc_sequence {
    pub base: drm_event,
    pub user_data: __u64,
    pub time_ns: __s64,
    pub sequence: __u64,
}
#[test]
fn bindgen_test_layout_drm_event_crtc_sequence() {
    assert_eq!(
        ::std::mem::size_of::<drm_event_crtc_sequence>(),
        32usize,
        concat!("Size of: ", stringify!(drm_event_crtc_sequence))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_event_crtc_sequence>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_event_crtc_sequence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event_crtc_sequence>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_crtc_sequence),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_event_crtc_sequence>())).user_data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_crtc_sequence),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_event_crtc_sequence>())).time_ns as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_crtc_sequence),
            "::",
            stringify!(time_ns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_event_crtc_sequence>())).sequence as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_event_crtc_sequence),
            "::",
            stringify!(sequence)
        )
    );
}
pub type drm_clip_rect_t = drm_clip_rect;
pub type drm_drawable_info_t = drm_drawable_info;
pub type drm_tex_region_t = drm_tex_region;
pub type drm_hw_lock_t = drm_hw_lock;
pub type drm_version_t = drm_version;
pub type drm_unique_t = drm_unique;
pub type drm_list_t = drm_list;
pub type drm_block_t = drm_block;
pub type drm_control_t = drm_control;
pub use self::drm_map_flags as drm_map_flags_t;
pub use self::drm_map_type as drm_map_type_t;
pub type drm_ctx_priv_map_t = drm_ctx_priv_map;
pub type drm_map_t = drm_map;
pub type drm_client_t = drm_client;
pub use self::drm_stat_type as drm_stat_type_t;
pub type drm_stats_t = drm_stats;
pub use self::drm_lock_flags as drm_lock_flags_t;
pub type drm_lock_t = drm_lock;
pub use self::drm_dma_flags as drm_dma_flags_t;
pub type drm_buf_desc_t = drm_buf_desc;
pub type drm_buf_info_t = drm_buf_info;
pub type drm_buf_free_t = drm_buf_free;
pub type drm_buf_pub_t = drm_buf_pub;
pub type drm_buf_map_t = drm_buf_map;
pub type drm_dma_t = drm_dma;
pub type drm_wait_vblank_t = drm_wait_vblank;
pub type drm_agp_mode_t = drm_agp_mode;
pub use self::drm_ctx_flags as drm_ctx_flags_t;
pub type drm_ctx_t = drm_ctx;
pub type drm_ctx_res_t = drm_ctx_res;
pub type drm_draw_t = drm_draw;
pub type drm_update_draw_t = drm_update_draw;
pub type drm_auth_t = drm_auth;
pub type drm_irq_busid_t = drm_irq_busid;
pub use self::drm_vblank_seq_type as drm_vblank_seq_type_t;
pub type drm_agp_buffer_t = drm_agp_buffer;
pub type drm_agp_binding_t = drm_agp_binding;
pub type drm_agp_info_t = drm_agp_info;
pub type drm_scatter_gather_t = drm_scatter_gather;
pub type drm_set_version_t = drm_set_version;
pub type drmSize = ::std::os::raw::c_uint;
pub type drmSizePtr = *mut ::std::os::raw::c_uint;
pub type drmAddress = *mut ::std::os::raw::c_void;
pub type drmAddressPtr = *mut *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmServerInfo {
    pub debug_print: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >,
    pub load_module: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub get_perms: ::std::option::Option<unsafe extern "C" fn(arg1: *mut gid_t, arg2: *mut mode_t)>,
}
#[test]
fn bindgen_test_layout__drmServerInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmServerInfo>(),
        24usize,
        concat!("Size of: ", stringify!(_drmServerInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmServerInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmServerInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmServerInfo>())).debug_print as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmServerInfo),
            "::",
            stringify!(debug_print)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmServerInfo>())).load_module as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmServerInfo),
            "::",
            stringify!(load_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmServerInfo>())).get_perms as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmServerInfo),
            "::",
            stringify!(get_perms)
        )
    );
}
pub type drmServerInfo = _drmServerInfo;
pub type drmServerInfoPtr = *mut _drmServerInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drmHashEntry {
    pub fd: ::std::os::raw::c_int,
    pub f: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    pub tagTable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_drmHashEntry() {
    assert_eq!(
        ::std::mem::size_of::<drmHashEntry>(),
        24usize,
        concat!("Size of: ", stringify!(drmHashEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<drmHashEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(drmHashEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drmHashEntry>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drmHashEntry),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drmHashEntry>())).f as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drmHashEntry),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drmHashEntry>())).tagTable as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drmHashEntry),
            "::",
            stringify!(tagTable)
        )
    );
}
extern "C" {
    pub fn drmIoctl(
        fd: ::std::os::raw::c_int,
        request: ::std::os::raw::c_ulong,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetHashTable() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn drmGetEntry(fd: ::std::os::raw::c_int) -> *mut drmHashEntry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmVersion {
    pub version_major: ::std::os::raw::c_int,
    pub version_minor: ::std::os::raw::c_int,
    pub version_patchlevel: ::std::os::raw::c_int,
    pub name_len: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub date_len: ::std::os::raw::c_int,
    pub date: *mut ::std::os::raw::c_char,
    pub desc_len: ::std::os::raw::c_int,
    pub desc: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__drmVersion() {
    assert_eq!(
        ::std::mem::size_of::<_drmVersion>(),
        56usize,
        concat!("Size of: ", stringify!(_drmVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmVersion>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).version_major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(version_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).version_minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(version_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).version_patchlevel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(version_patchlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).name_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).date_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(date_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).date as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).desc_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(desc_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVersion>())).desc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVersion),
            "::",
            stringify!(desc)
        )
    );
}
pub type drmVersion = _drmVersion;
pub type drmVersionPtr = *mut _drmVersion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmStats {
    pub count: ::std::os::raw::c_ulong,
    pub data: [_drmStats__bindgen_ty_1; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmStats__bindgen_ty_1 {
    pub value: ::std::os::raw::c_ulong,
    pub long_format: *const ::std::os::raw::c_char,
    pub long_name: *const ::std::os::raw::c_char,
    pub rate_format: *const ::std::os::raw::c_char,
    pub rate_name: *const ::std::os::raw::c_char,
    pub isvalue: ::std::os::raw::c_int,
    pub mult_names: *const ::std::os::raw::c_char,
    pub mult: ::std::os::raw::c_int,
    pub verbose: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__drmStats__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_drmStats__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(_drmStats__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmStats__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmStats__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).long_format as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(long_format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).long_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(long_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).rate_format as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(rate_format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).rate_name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(rate_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).isvalue as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(isvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).mult_names as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(mult_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).mult as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(mult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmStats__bindgen_ty_1>())).verbose as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats__bindgen_ty_1),
            "::",
            stringify!(verbose)
        )
    );
}
#[test]
fn bindgen_test_layout__drmStats() {
    assert_eq!(
        ::std::mem::size_of::<_drmStats>(),
        968usize,
        concat!("Size of: ", stringify!(_drmStats))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmStats>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmStats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmStats>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmStats>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmStats),
            "::",
            stringify!(data)
        )
    );
}
pub type drmStatsT = _drmStats;
pub const drmMapType_DRM_FRAME_BUFFER: drmMapType = 0;
pub const drmMapType_DRM_REGISTERS: drmMapType = 1;
pub const drmMapType_DRM_SHM: drmMapType = 2;
pub const drmMapType_DRM_AGP: drmMapType = 3;
pub const drmMapType_DRM_SCATTER_GATHER: drmMapType = 4;
pub const drmMapType_DRM_CONSISTENT: drmMapType = 5;
pub type drmMapType = ::std::os::raw::c_uint;
pub const drmMapFlags_DRM_RESTRICTED: drmMapFlags = 1;
pub const drmMapFlags_DRM_READ_ONLY: drmMapFlags = 2;
pub const drmMapFlags_DRM_LOCKED: drmMapFlags = 4;
pub const drmMapFlags_DRM_KERNEL: drmMapFlags = 8;
pub const drmMapFlags_DRM_WRITE_COMBINING: drmMapFlags = 16;
pub const drmMapFlags_DRM_CONTAINS_LOCK: drmMapFlags = 32;
pub const drmMapFlags_DRM_REMOVABLE: drmMapFlags = 64;
pub type drmMapFlags = ::std::os::raw::c_uint;
pub const drmDMAFlags_DRM_DMA_BLOCK: drmDMAFlags = 1;
pub const drmDMAFlags_DRM_DMA_WHILE_LOCKED: drmDMAFlags = 2;
pub const drmDMAFlags_DRM_DMA_PRIORITY: drmDMAFlags = 4;
pub const drmDMAFlags_DRM_DMA_WAIT: drmDMAFlags = 16;
pub const drmDMAFlags_DRM_DMA_SMALLER_OK: drmDMAFlags = 32;
pub const drmDMAFlags_DRM_DMA_LARGER_OK: drmDMAFlags = 64;
pub type drmDMAFlags = ::std::os::raw::c_uint;
pub const drmBufDescFlags_DRM_PAGE_ALIGN: drmBufDescFlags = 1;
pub const drmBufDescFlags_DRM_AGP_BUFFER: drmBufDescFlags = 2;
pub const drmBufDescFlags_DRM_SG_BUFFER: drmBufDescFlags = 4;
pub const drmBufDescFlags_DRM_FB_BUFFER: drmBufDescFlags = 8;
pub const drmBufDescFlags_DRM_PCI_BUFFER_RO: drmBufDescFlags = 16;
pub type drmBufDescFlags = ::std::os::raw::c_uint;
pub const drmLockFlags_DRM_LOCK_READY: drmLockFlags = 1;
pub const drmLockFlags_DRM_LOCK_QUIESCENT: drmLockFlags = 2;
pub const drmLockFlags_DRM_LOCK_FLUSH: drmLockFlags = 4;
pub const drmLockFlags_DRM_LOCK_FLUSH_ALL: drmLockFlags = 8;
pub const drmLockFlags_DRM_HALT_ALL_QUEUES: drmLockFlags = 16;
pub const drmLockFlags_DRM_HALT_CUR_QUEUES: drmLockFlags = 32;
pub type drmLockFlags = ::std::os::raw::c_uint;
pub const drm_context_tFlags_DRM_CONTEXT_PRESERVED: drm_context_tFlags = 1;
pub const drm_context_tFlags_DRM_CONTEXT_2DONLY: drm_context_tFlags = 2;
pub type drm_context_tFlags = ::std::os::raw::c_uint;
pub type drm_context_tFlagsPtr = *mut drm_context_tFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmBufDesc {
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub low_mark: ::std::os::raw::c_int,
    pub high_mark: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__drmBufDesc() {
    assert_eq!(
        ::std::mem::size_of::<_drmBufDesc>(),
        16usize,
        concat!("Size of: ", stringify!(_drmBufDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmBufDesc>(),
        4usize,
        concat!("Alignment of ", stringify!(_drmBufDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBufDesc>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBufDesc),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBufDesc>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBufDesc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBufDesc>())).low_mark as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBufDesc),
            "::",
            stringify!(low_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBufDesc>())).high_mark as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBufDesc),
            "::",
            stringify!(high_mark)
        )
    );
}
pub type drmBufDesc = _drmBufDesc;
pub type drmBufDescPtr = *mut _drmBufDesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmBufInfo {
    pub count: ::std::os::raw::c_int,
    pub list: drmBufDescPtr,
}
#[test]
fn bindgen_test_layout__drmBufInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmBufInfo>(),
        16usize,
        concat!("Size of: ", stringify!(_drmBufInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmBufInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmBufInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBufInfo>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBufInfo),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBufInfo>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBufInfo),
            "::",
            stringify!(list)
        )
    );
}
pub type drmBufInfo = _drmBufInfo;
pub type drmBufInfoPtr = *mut _drmBufInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmBuf {
    pub idx: ::std::os::raw::c_int,
    pub total: ::std::os::raw::c_int,
    pub used: ::std::os::raw::c_int,
    pub address: drmAddress,
}
#[test]
fn bindgen_test_layout__drmBuf() {
    assert_eq!(
        ::std::mem::size_of::<_drmBuf>(),
        24usize,
        concat!("Size of: ", stringify!(_drmBuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmBuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmBuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBuf>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBuf),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBuf>())).total as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBuf),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBuf>())).used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBuf),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBuf>())).address as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBuf),
            "::",
            stringify!(address)
        )
    );
}
pub type drmBuf = _drmBuf;
pub type drmBufPtr = *mut _drmBuf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmBufMap {
    pub count: ::std::os::raw::c_int,
    pub list: drmBufPtr,
}
#[test]
fn bindgen_test_layout__drmBufMap() {
    assert_eq!(
        ::std::mem::size_of::<_drmBufMap>(),
        16usize,
        concat!("Size of: ", stringify!(_drmBufMap))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmBufMap>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmBufMap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBufMap>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBufMap),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmBufMap>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmBufMap),
            "::",
            stringify!(list)
        )
    );
}
pub type drmBufMap = _drmBufMap;
pub type drmBufMapPtr = *mut _drmBufMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmLock {
    pub lock: ::std::os::raw::c_uint,
    pub padding: [::std::os::raw::c_char; 60usize],
}
#[test]
fn bindgen_test_layout__drmLock() {
    assert_eq!(
        ::std::mem::size_of::<_drmLock>(),
        64usize,
        concat!("Size of: ", stringify!(_drmLock))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmLock>(),
        4usize,
        concat!("Alignment of ", stringify!(_drmLock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmLock>())).lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmLock),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmLock>())).padding as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmLock),
            "::",
            stringify!(padding)
        )
    );
}
pub type drmLock = _drmLock;
pub type drmLockPtr = *mut _drmLock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmDMAReq {
    pub context: drm_context_t,
    pub send_count: ::std::os::raw::c_int,
    pub send_list: *mut ::std::os::raw::c_int,
    pub send_sizes: *mut ::std::os::raw::c_int,
    pub flags: drmDMAFlags,
    pub request_count: ::std::os::raw::c_int,
    pub request_size: ::std::os::raw::c_int,
    pub request_list: *mut ::std::os::raw::c_int,
    pub request_sizes: *mut ::std::os::raw::c_int,
    pub granted_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__drmDMAReq() {
    assert_eq!(
        ::std::mem::size_of::<_drmDMAReq>(),
        64usize,
        concat!("Size of: ", stringify!(_drmDMAReq))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmDMAReq>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmDMAReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).send_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(send_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).send_list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(send_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).send_sizes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(send_sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).request_count as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(request_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).request_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(request_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).request_list as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(request_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).request_sizes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(request_sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDMAReq>())).granted_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDMAReq),
            "::",
            stringify!(granted_count)
        )
    );
}
pub type drmDMAReq = _drmDMAReq;
pub type drmDMAReqPtr = *mut _drmDMAReq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmRegion {
    pub handle: drm_handle_t,
    pub offset: ::std::os::raw::c_uint,
    pub size: drmSize,
    pub map: drmAddress,
}
#[test]
fn bindgen_test_layout__drmRegion() {
    assert_eq!(
        ::std::mem::size_of::<_drmRegion>(),
        24usize,
        concat!("Size of: ", stringify!(_drmRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmRegion>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmRegion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmRegion>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmRegion),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmRegion>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmRegion),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmRegion>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmRegion),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmRegion>())).map as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmRegion),
            "::",
            stringify!(map)
        )
    );
}
pub type drmRegion = _drmRegion;
pub type drmRegionPtr = *mut _drmRegion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmTextureRegion {
    pub next: ::std::os::raw::c_uchar,
    pub prev: ::std::os::raw::c_uchar,
    pub in_use: ::std::os::raw::c_uchar,
    pub padding: ::std::os::raw::c_uchar,
    pub age: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__drmTextureRegion() {
    assert_eq!(
        ::std::mem::size_of::<_drmTextureRegion>(),
        8usize,
        concat!("Size of: ", stringify!(_drmTextureRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmTextureRegion>(),
        4usize,
        concat!("Alignment of ", stringify!(_drmTextureRegion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmTextureRegion>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmTextureRegion),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmTextureRegion>())).prev as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmTextureRegion),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmTextureRegion>())).in_use as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmTextureRegion),
            "::",
            stringify!(in_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmTextureRegion>())).padding as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmTextureRegion),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmTextureRegion>())).age as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmTextureRegion),
            "::",
            stringify!(age)
        )
    );
}
pub type drmTextureRegion = _drmTextureRegion;
pub type drmTextureRegionPtr = *mut _drmTextureRegion;
pub const drmVBlankSeqType_DRM_VBLANK_ABSOLUTE: drmVBlankSeqType = 0;
pub const drmVBlankSeqType_DRM_VBLANK_RELATIVE: drmVBlankSeqType = 1;
pub const drmVBlankSeqType_DRM_VBLANK_HIGH_CRTC_MASK: drmVBlankSeqType = 62;
pub const drmVBlankSeqType_DRM_VBLANK_EVENT: drmVBlankSeqType = 67108864;
pub const drmVBlankSeqType_DRM_VBLANK_FLIP: drmVBlankSeqType = 134217728;
pub const drmVBlankSeqType_DRM_VBLANK_NEXTONMISS: drmVBlankSeqType = 268435456;
pub const drmVBlankSeqType_DRM_VBLANK_SECONDARY: drmVBlankSeqType = 536870912;
pub const drmVBlankSeqType_DRM_VBLANK_SIGNAL: drmVBlankSeqType = 1073741824;
pub type drmVBlankSeqType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmVBlankReq {
    pub type_: drmVBlankSeqType,
    pub sequence: ::std::os::raw::c_uint,
    pub signal: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__drmVBlankReq() {
    assert_eq!(
        ::std::mem::size_of::<_drmVBlankReq>(),
        16usize,
        concat!("Size of: ", stringify!(_drmVBlankReq))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmVBlankReq>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmVBlankReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlankReq>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlankReq),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlankReq>())).sequence as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlankReq),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlankReq>())).signal as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlankReq),
            "::",
            stringify!(signal)
        )
    );
}
pub type drmVBlankReq = _drmVBlankReq;
pub type drmVBlankReqPtr = *mut _drmVBlankReq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmVBlankReply {
    pub type_: drmVBlankSeqType,
    pub sequence: ::std::os::raw::c_uint,
    pub tval_sec: ::std::os::raw::c_long,
    pub tval_usec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__drmVBlankReply() {
    assert_eq!(
        ::std::mem::size_of::<_drmVBlankReply>(),
        24usize,
        concat!("Size of: ", stringify!(_drmVBlankReply))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmVBlankReply>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmVBlankReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlankReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlankReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlankReply>())).sequence as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlankReply),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlankReply>())).tval_sec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlankReply),
            "::",
            stringify!(tval_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlankReply>())).tval_usec as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlankReply),
            "::",
            stringify!(tval_usec)
        )
    );
}
pub type drmVBlankReply = _drmVBlankReply;
pub type drmVBlankReplyPtr = *mut _drmVBlankReply;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _drmVBlank {
    pub request: drmVBlankReq,
    pub reply: drmVBlankReply,
}
#[test]
fn bindgen_test_layout__drmVBlank() {
    assert_eq!(
        ::std::mem::size_of::<_drmVBlank>(),
        24usize,
        concat!("Size of: ", stringify!(_drmVBlank))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmVBlank>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmVBlank))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlank>())).request as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlank),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmVBlank>())).reply as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmVBlank),
            "::",
            stringify!(reply)
        )
    );
}
pub type drmVBlank = _drmVBlank;
pub type drmVBlankPtr = *mut _drmVBlank;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmSetVersion {
    pub drm_di_major: ::std::os::raw::c_int,
    pub drm_di_minor: ::std::os::raw::c_int,
    pub drm_dd_major: ::std::os::raw::c_int,
    pub drm_dd_minor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__drmSetVersion() {
    assert_eq!(
        ::std::mem::size_of::<_drmSetVersion>(),
        16usize,
        concat!("Size of: ", stringify!(_drmSetVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmSetVersion>(),
        4usize,
        concat!("Alignment of ", stringify!(_drmSetVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmSetVersion>())).drm_di_major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmSetVersion),
            "::",
            stringify!(drm_di_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmSetVersion>())).drm_di_minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmSetVersion),
            "::",
            stringify!(drm_di_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmSetVersion>())).drm_dd_major as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmSetVersion),
            "::",
            stringify!(drm_dd_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmSetVersion>())).drm_dd_minor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmSetVersion),
            "::",
            stringify!(drm_dd_minor)
        )
    );
}
pub type drmSetVersion = _drmSetVersion;
pub type drmSetVersionPtr = *mut _drmSetVersion;
extern "C" {
    pub fn drmAvailable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmOpen(
        name: *const ::std::os::raw::c_char,
        busid: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmOpenWithType(
        name: *const ::std::os::raw::c_char,
        busid: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmOpenControl(minor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmOpenRender(minor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmClose(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetVersion(fd: ::std::os::raw::c_int) -> drmVersionPtr;
}
extern "C" {
    pub fn drmGetLibVersion(fd: ::std::os::raw::c_int) -> drmVersionPtr;
}
extern "C" {
    pub fn drmGetCap(
        fd: ::std::os::raw::c_int,
        capability: u64,
        value: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmFreeVersion(arg1: drmVersionPtr);
}
extern "C" {
    pub fn drmGetMagic(fd: ::std::os::raw::c_int, magic: *mut drm_magic_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetBusid(fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn drmGetInterruptFromBusID(
        fd: ::std::os::raw::c_int,
        busnum: ::std::os::raw::c_int,
        devnum: ::std::os::raw::c_int,
        funcnum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetMap(
        fd: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        offset: *mut drm_handle_t,
        size: *mut drmSize,
        type_: *mut drmMapType,
        flags: *mut drmMapFlags,
        handle: *mut drm_handle_t,
        mtrr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetClient(
        fd: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        auth: *mut ::std::os::raw::c_int,
        pid: *mut ::std::os::raw::c_int,
        uid: *mut ::std::os::raw::c_int,
        magic: *mut ::std::os::raw::c_ulong,
        iocs: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetStats(fd: ::std::os::raw::c_int, stats: *mut drmStatsT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSetInterfaceVersion(
        fd: ::std::os::raw::c_int,
        version: *mut drmSetVersion,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCommandNone(
        fd: ::std::os::raw::c_int,
        drmCommandIndex: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCommandRead(
        fd: ::std::os::raw::c_int,
        drmCommandIndex: ::std::os::raw::c_ulong,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCommandWrite(
        fd: ::std::os::raw::c_int,
        drmCommandIndex: ::std::os::raw::c_ulong,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCommandWriteRead(
        fd: ::std::os::raw::c_int,
        drmCommandIndex: ::std::os::raw::c_ulong,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmFreeBusid(busid: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn drmSetBusid(
        fd: ::std::os::raw::c_int,
        busid: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAuthMagic(fd: ::std::os::raw::c_int, magic: drm_magic_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAddMap(
        fd: ::std::os::raw::c_int,
        offset: drm_handle_t,
        size: drmSize,
        type_: drmMapType,
        flags: drmMapFlags,
        handle: *mut drm_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmRmMap(fd: ::std::os::raw::c_int, handle: drm_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAddContextPrivateMapping(
        fd: ::std::os::raw::c_int,
        ctx_id: drm_context_t,
        handle: drm_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAddBufs(
        fd: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        flags: drmBufDescFlags,
        agp_offset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmMarkBufs(fd: ::std::os::raw::c_int, low: f64, high: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCreateContext(
        fd: ::std::os::raw::c_int,
        handle: *mut drm_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSetContextFlags(
        fd: ::std::os::raw::c_int,
        context: drm_context_t,
        flags: drm_context_tFlags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetContextFlags(
        fd: ::std::os::raw::c_int,
        context: drm_context_t,
        flags: drm_context_tFlagsPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAddContextTag(
        fd: ::std::os::raw::c_int,
        context: drm_context_t,
        tag: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmDelContextTag(
        fd: ::std::os::raw::c_int,
        context: drm_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetContextTag(
        fd: ::std::os::raw::c_int,
        context: drm_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn drmGetReservedContextList(
        fd: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut drm_context_t;
}
extern "C" {
    pub fn drmFreeReservedContextList(arg1: *mut drm_context_t);
}
extern "C" {
    pub fn drmSwitchToContext(
        fd: ::std::os::raw::c_int,
        context: drm_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmDestroyContext(
        fd: ::std::os::raw::c_int,
        handle: drm_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCreateDrawable(
        fd: ::std::os::raw::c_int,
        handle: *mut drm_drawable_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmDestroyDrawable(
        fd: ::std::os::raw::c_int,
        handle: drm_drawable_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmUpdateDrawableInfo(
        fd: ::std::os::raw::c_int,
        handle: drm_drawable_t,
        type_: drm_drawable_info_type_t,
        num: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCtlInstHandler(
        fd: ::std::os::raw::c_int,
        irq: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCtlUninstHandler(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSetClientCap(
        fd: ::std::os::raw::c_int,
        capability: u64,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCrtcGetSequence(
        fd: ::std::os::raw::c_int,
        crtcId: u32,
        sequence: *mut u64,
        ns: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCrtcQueueSequence(
        fd: ::std::os::raw::c_int,
        crtcId: u32,
        flags: u32,
        sequence: u64,
        sequence_queued: *mut u64,
        user_data: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmMap(
        fd: ::std::os::raw::c_int,
        handle: drm_handle_t,
        size: drmSize,
        address: drmAddressPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmUnmap(address: drmAddress, size: drmSize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetBufInfo(fd: ::std::os::raw::c_int) -> drmBufInfoPtr;
}
extern "C" {
    pub fn drmMapBufs(fd: ::std::os::raw::c_int) -> drmBufMapPtr;
}
extern "C" {
    pub fn drmUnmapBufs(bufs: drmBufMapPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmDMA(fd: ::std::os::raw::c_int, request: drmDMAReqPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmFreeBufs(
        fd: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        list: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetLock(
        fd: ::std::os::raw::c_int,
        context: drm_context_t,
        flags: drmLockFlags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmUnlock(fd: ::std::os::raw::c_int, context: drm_context_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmFinish(
        fd: ::std::os::raw::c_int,
        context: ::std::os::raw::c_int,
        flags: drmLockFlags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetContextPrivateMapping(
        fd: ::std::os::raw::c_int,
        ctx_id: drm_context_t,
        handle: *mut drm_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpAcquire(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpRelease(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpEnable(
        fd: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpAlloc(
        fd: ::std::os::raw::c_int,
        size: ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_ulong,
        address: *mut ::std::os::raw::c_ulong,
        handle: *mut drm_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpFree(fd: ::std::os::raw::c_int, handle: drm_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpBind(
        fd: ::std::os::raw::c_int,
        handle: drm_handle_t,
        offset: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpUnbind(fd: ::std::os::raw::c_int, handle: drm_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpVersionMajor(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpVersionMinor(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmAgpGetMode(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn drmAgpBase(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn drmAgpSize(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn drmAgpMemoryUsed(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn drmAgpMemoryAvail(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn drmAgpVendorId(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn drmAgpDeviceId(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn drmScatterGatherAlloc(
        fd: ::std::os::raw::c_int,
        size: ::std::os::raw::c_ulong,
        handle: *mut drm_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmScatterGatherFree(
        fd: ::std::os::raw::c_int,
        handle: drm_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmWaitVBlank(fd: ::std::os::raw::c_int, vbl: drmVBlankPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSetServerInfo(info: drmServerInfoPtr);
}
extern "C" {
    pub fn drmError(
        err: ::std::os::raw::c_int,
        label: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmMalloc(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn drmFree(pt: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn drmHashCreate() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn drmHashDestroy(t: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmHashLookup(
        t: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_ulong,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmHashInsert(
        t: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_ulong,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmHashDelete(
        t: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmHashFirst(
        t: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_ulong,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmHashNext(
        t: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_ulong,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmRandomCreate(seed: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn drmRandomDestroy(state: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmRandom(state: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn drmRandomDouble(state: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    pub fn drmSLCreate() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn drmSLDestroy(l: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSLLookup(
        l: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_ulong,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSLInsert(
        l: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_ulong,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSLDelete(
        l: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSLNext(
        l: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_ulong,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSLFirst(
        l: *mut ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_ulong,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSLDump(l: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn drmSLLookupNeighbors(
        l: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_ulong,
        prev_key: *mut ::std::os::raw::c_ulong,
        prev_value: *mut *mut ::std::os::raw::c_void,
        next_key: *mut ::std::os::raw::c_ulong,
        next_value: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmOpenOnce(
        unused: *mut ::std::os::raw::c_void,
        BusID: *const ::std::os::raw::c_char,
        newlyopened: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmOpenOnceWithType(
        BusID: *const ::std::os::raw::c_char,
        newlyopened: *mut ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCloseOnce(fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn drmMsg(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn drmSetMaster(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmDropMaster(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmIsMaster(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmEventContext {
    pub version: ::std::os::raw::c_int,
    pub vblank_handler: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            sequence: ::std::os::raw::c_uint,
            tv_sec: ::std::os::raw::c_uint,
            tv_usec: ::std::os::raw::c_uint,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub page_flip_handler: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            sequence: ::std::os::raw::c_uint,
            tv_sec: ::std::os::raw::c_uint,
            tv_usec: ::std::os::raw::c_uint,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub page_flip_handler2: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            sequence: ::std::os::raw::c_uint,
            tv_sec: ::std::os::raw::c_uint,
            tv_usec: ::std::os::raw::c_uint,
            crtc_id: ::std::os::raw::c_uint,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sequence_handler: ::std::option::Option<
        unsafe extern "C" fn(fd: ::std::os::raw::c_int, sequence: u64, ns: u64, user_data: u64),
    >,
}
#[test]
fn bindgen_test_layout__drmEventContext() {
    assert_eq!(
        ::std::mem::size_of::<_drmEventContext>(),
        40usize,
        concat!("Size of: ", stringify!(_drmEventContext))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmEventContext>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmEventContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmEventContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmEventContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmEventContext>())).vblank_handler as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmEventContext),
            "::",
            stringify!(vblank_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmEventContext>())).page_flip_handler as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmEventContext),
            "::",
            stringify!(page_flip_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmEventContext>())).page_flip_handler2 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmEventContext),
            "::",
            stringify!(page_flip_handler2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmEventContext>())).sequence_handler as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmEventContext),
            "::",
            stringify!(sequence_handler)
        )
    );
}
pub type drmEventContext = _drmEventContext;
pub type drmEventContextPtr = *mut _drmEventContext;
extern "C" {
    pub fn drmHandleEvent(
        fd: ::std::os::raw::c_int,
        evctx: drmEventContextPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetDeviceNameFromFd(fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn drmGetDeviceNameFromFd2(fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn drmGetNodeTypeFromFd(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmPrimeHandleToFD(
        fd: ::std::os::raw::c_int,
        handle: u32,
        flags: u32,
        prime_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmPrimeFDToHandle(
        fd: ::std::os::raw::c_int,
        prime_fd: ::std::os::raw::c_int,
        handle: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmCloseBufferHandle(fd: ::std::os::raw::c_int, handle: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetPrimaryDeviceNameFromFd(fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn drmGetRenderDeviceNameFromFd(fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmPciBusInfo {
    pub domain: u16,
    pub bus: u8,
    pub dev: u8,
    pub func: u8,
}
#[test]
fn bindgen_test_layout__drmPciBusInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmPciBusInfo>(),
        6usize,
        concat!("Size of: ", stringify!(_drmPciBusInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmPciBusInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(_drmPciBusInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciBusInfo>())).domain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciBusInfo),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciBusInfo>())).bus as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciBusInfo),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciBusInfo>())).dev as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciBusInfo),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciBusInfo>())).func as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciBusInfo),
            "::",
            stringify!(func)
        )
    );
}
pub type drmPciBusInfo = _drmPciBusInfo;
pub type drmPciBusInfoPtr = *mut _drmPciBusInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmPciDeviceInfo {
    pub vendor_id: u16,
    pub device_id: u16,
    pub subvendor_id: u16,
    pub subdevice_id: u16,
    pub revision_id: u8,
}
#[test]
fn bindgen_test_layout__drmPciDeviceInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmPciDeviceInfo>(),
        10usize,
        concat!("Size of: ", stringify!(_drmPciDeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmPciDeviceInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(_drmPciDeviceInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciDeviceInfo>())).vendor_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciDeviceInfo),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciDeviceInfo>())).device_id as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciDeviceInfo),
            "::",
            stringify!(device_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciDeviceInfo>())).subvendor_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciDeviceInfo),
            "::",
            stringify!(subvendor_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciDeviceInfo>())).subdevice_id as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciDeviceInfo),
            "::",
            stringify!(subdevice_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPciDeviceInfo>())).revision_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPciDeviceInfo),
            "::",
            stringify!(revision_id)
        )
    );
}
pub type drmPciDeviceInfo = _drmPciDeviceInfo;
pub type drmPciDeviceInfoPtr = *mut _drmPciDeviceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmUsbBusInfo {
    pub bus: u8,
    pub dev: u8,
}
#[test]
fn bindgen_test_layout__drmUsbBusInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmUsbBusInfo>(),
        2usize,
        concat!("Size of: ", stringify!(_drmUsbBusInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmUsbBusInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(_drmUsbBusInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmUsbBusInfo>())).bus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmUsbBusInfo),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmUsbBusInfo>())).dev as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmUsbBusInfo),
            "::",
            stringify!(dev)
        )
    );
}
pub type drmUsbBusInfo = _drmUsbBusInfo;
pub type drmUsbBusInfoPtr = *mut _drmUsbBusInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmUsbDeviceInfo {
    pub vendor: u16,
    pub product: u16,
}
#[test]
fn bindgen_test_layout__drmUsbDeviceInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmUsbDeviceInfo>(),
        4usize,
        concat!("Size of: ", stringify!(_drmUsbDeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmUsbDeviceInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(_drmUsbDeviceInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmUsbDeviceInfo>())).vendor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmUsbDeviceInfo),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmUsbDeviceInfo>())).product as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmUsbDeviceInfo),
            "::",
            stringify!(product)
        )
    );
}
pub type drmUsbDeviceInfo = _drmUsbDeviceInfo;
pub type drmUsbDeviceInfoPtr = *mut _drmUsbDeviceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmPlatformBusInfo {
    pub fullname: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout__drmPlatformBusInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmPlatformBusInfo>(),
        512usize,
        concat!("Size of: ", stringify!(_drmPlatformBusInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmPlatformBusInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(_drmPlatformBusInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmPlatformBusInfo>())).fullname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPlatformBusInfo),
            "::",
            stringify!(fullname)
        )
    );
}
pub type drmPlatformBusInfo = _drmPlatformBusInfo;
pub type drmPlatformBusInfoPtr = *mut _drmPlatformBusInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmPlatformDeviceInfo {
    pub compatible: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__drmPlatformDeviceInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmPlatformDeviceInfo>(),
        8usize,
        concat!("Size of: ", stringify!(_drmPlatformDeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmPlatformDeviceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmPlatformDeviceInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmPlatformDeviceInfo>())).compatible as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmPlatformDeviceInfo),
            "::",
            stringify!(compatible)
        )
    );
}
pub type drmPlatformDeviceInfo = _drmPlatformDeviceInfo;
pub type drmPlatformDeviceInfoPtr = *mut _drmPlatformDeviceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmHost1xBusInfo {
    pub fullname: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout__drmHost1xBusInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmHost1xBusInfo>(),
        512usize,
        concat!("Size of: ", stringify!(_drmHost1xBusInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmHost1xBusInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(_drmHost1xBusInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmHost1xBusInfo>())).fullname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmHost1xBusInfo),
            "::",
            stringify!(fullname)
        )
    );
}
pub type drmHost1xBusInfo = _drmHost1xBusInfo;
pub type drmHost1xBusInfoPtr = *mut _drmHost1xBusInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _drmHost1xDeviceInfo {
    pub compatible: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__drmHost1xDeviceInfo() {
    assert_eq!(
        ::std::mem::size_of::<_drmHost1xDeviceInfo>(),
        8usize,
        concat!("Size of: ", stringify!(_drmHost1xDeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmHost1xDeviceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmHost1xDeviceInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmHost1xDeviceInfo>())).compatible as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmHost1xDeviceInfo),
            "::",
            stringify!(compatible)
        )
    );
}
pub type drmHost1xDeviceInfo = _drmHost1xDeviceInfo;
pub type drmHost1xDeviceInfoPtr = *mut _drmHost1xDeviceInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _drmDevice {
    pub nodes: *mut *mut ::std::os::raw::c_char,
    pub available_nodes: ::std::os::raw::c_int,
    pub bustype: ::std::os::raw::c_int,
    pub businfo: _drmDevice__bindgen_ty_1,
    pub deviceinfo: _drmDevice__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _drmDevice__bindgen_ty_1 {
    pub pci: drmPciBusInfoPtr,
    pub usb: drmUsbBusInfoPtr,
    pub platform: drmPlatformBusInfoPtr,
    pub host1x: drmHost1xBusInfoPtr,
}
#[test]
fn bindgen_test_layout__drmDevice__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_drmDevice__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_drmDevice__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmDevice__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmDevice__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice__bindgen_ty_1>())).pci as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice__bindgen_ty_1),
            "::",
            stringify!(pci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice__bindgen_ty_1>())).usb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice__bindgen_ty_1),
            "::",
            stringify!(usb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmDevice__bindgen_ty_1>())).platform as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice__bindgen_ty_1),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice__bindgen_ty_1>())).host1x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice__bindgen_ty_1),
            "::",
            stringify!(host1x)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _drmDevice__bindgen_ty_2 {
    pub pci: drmPciDeviceInfoPtr,
    pub usb: drmUsbDeviceInfoPtr,
    pub platform: drmPlatformDeviceInfoPtr,
    pub host1x: drmHost1xDeviceInfoPtr,
}
#[test]
fn bindgen_test_layout__drmDevice__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_drmDevice__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_drmDevice__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmDevice__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmDevice__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice__bindgen_ty_2>())).pci as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice__bindgen_ty_2),
            "::",
            stringify!(pci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice__bindgen_ty_2>())).usb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice__bindgen_ty_2),
            "::",
            stringify!(usb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_drmDevice__bindgen_ty_2>())).platform as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice__bindgen_ty_2),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice__bindgen_ty_2>())).host1x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice__bindgen_ty_2),
            "::",
            stringify!(host1x)
        )
    );
}
#[test]
fn bindgen_test_layout__drmDevice() {
    assert_eq!(
        ::std::mem::size_of::<_drmDevice>(),
        32usize,
        concat!("Size of: ", stringify!(_drmDevice))
    );
    assert_eq!(
        ::std::mem::align_of::<_drmDevice>(),
        8usize,
        concat!("Alignment of ", stringify!(_drmDevice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice>())).nodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice>())).available_nodes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice),
            "::",
            stringify!(available_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice>())).bustype as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice),
            "::",
            stringify!(bustype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice>())).businfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice),
            "::",
            stringify!(businfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_drmDevice>())).deviceinfo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_drmDevice),
            "::",
            stringify!(deviceinfo)
        )
    );
}
pub type drmDevice = _drmDevice;
pub type drmDevicePtr = *mut _drmDevice;
extern "C" {
    pub fn drmGetDevice(
        fd: ::std::os::raw::c_int,
        device: *mut drmDevicePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmFreeDevice(device: *mut drmDevicePtr);
}
extern "C" {
    pub fn drmGetDevices(
        devices: *mut drmDevicePtr,
        max_devices: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmFreeDevices(devices: *mut drmDevicePtr, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn drmGetDevice2(
        fd: ::std::os::raw::c_int,
        flags: u32,
        device: *mut drmDevicePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetDevices2(
        flags: u32,
        devices: *mut drmDevicePtr,
        max_devices: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetDeviceFromDevId(
        dev_id: dev_t,
        flags: u32,
        device: *mut drmDevicePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmDevicesEqual(a: drmDevicePtr, b: drmDevicePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjCreate(
        fd: ::std::os::raw::c_int,
        flags: u32,
        handle: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjDestroy(fd: ::std::os::raw::c_int, handle: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjHandleToFD(
        fd: ::std::os::raw::c_int,
        handle: u32,
        obj_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjFDToHandle(
        fd: ::std::os::raw::c_int,
        obj_fd: ::std::os::raw::c_int,
        handle: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjImportSyncFile(
        fd: ::std::os::raw::c_int,
        handle: u32,
        sync_file_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjExportSyncFile(
        fd: ::std::os::raw::c_int,
        handle: u32,
        sync_file_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjWait(
        fd: ::std::os::raw::c_int,
        handles: *mut u32,
        num_handles: ::std::os::raw::c_uint,
        timeout_nsec: i64,
        flags: ::std::os::raw::c_uint,
        first_signaled: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjReset(
        fd: ::std::os::raw::c_int,
        handles: *const u32,
        handle_count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjSignal(
        fd: ::std::os::raw::c_int,
        handles: *const u32,
        handle_count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjTimelineSignal(
        fd: ::std::os::raw::c_int,
        handles: *const u32,
        points: *mut u64,
        handle_count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjTimelineWait(
        fd: ::std::os::raw::c_int,
        handles: *mut u32,
        points: *mut u64,
        num_handles: ::std::os::raw::c_uint,
        timeout_nsec: i64,
        flags: ::std::os::raw::c_uint,
        first_signaled: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjQuery(
        fd: ::std::os::raw::c_int,
        handles: *mut u32,
        points: *mut u64,
        handle_count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjQuery2(
        fd: ::std::os::raw::c_int,
        handles: *mut u32,
        points: *mut u64,
        handle_count: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmSyncobjTransfer(
        fd: ::std::os::raw::c_int,
        dst_handle: u32,
        dst_point: u64,
        src_handle: u32,
        src_point: u64,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drmGetFormatModifierVendor(modifier: u64) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn drmGetFormatModifierName(modifier: u64) -> *mut ::std::os::raw::c_char;
}
pub const amdgpu_bo_handle_type_amdgpu_bo_handle_type_gem_flink_name: amdgpu_bo_handle_type = 0;
pub const amdgpu_bo_handle_type_amdgpu_bo_handle_type_kms: amdgpu_bo_handle_type = 1;
pub const amdgpu_bo_handle_type_amdgpu_bo_handle_type_dma_buf_fd: amdgpu_bo_handle_type = 2;
pub const amdgpu_bo_handle_type_amdgpu_bo_handle_type_kms_noimport: amdgpu_bo_handle_type = 3;
pub type amdgpu_bo_handle_type = ::std::os::raw::c_uint;
pub const amdgpu_gpu_va_range_amdgpu_gpu_va_range_general: amdgpu_gpu_va_range = 0;
pub type amdgpu_gpu_va_range = ::std::os::raw::c_uint;
pub const amdgpu_sw_info_amdgpu_sw_info_address32_hi: amdgpu_sw_info = 0;
pub type amdgpu_sw_info = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_device {
    _unused: [u8; 0],
}
pub type amdgpu_device_handle = *mut amdgpu_device;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_context {
    _unused: [u8; 0],
}
pub type amdgpu_context_handle = *mut amdgpu_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo {
    _unused: [u8; 0],
}
pub type amdgpu_bo_handle = *mut amdgpu_bo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_list {
    _unused: [u8; 0],
}
pub type amdgpu_bo_list_handle = *mut amdgpu_bo_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_va {
    _unused: [u8; 0],
}
pub type amdgpu_va_handle = *mut amdgpu_va;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_semaphore {
    _unused: [u8; 0],
}
pub type amdgpu_semaphore_handle = *mut amdgpu_semaphore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_alloc_request {
    pub alloc_size: u64,
    pub phys_alignment: u64,
    pub preferred_heap: u32,
    pub flags: u64,
}
#[test]
fn bindgen_test_layout_amdgpu_bo_alloc_request() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_bo_alloc_request>(),
        32usize,
        concat!("Size of: ", stringify!(amdgpu_bo_alloc_request))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_bo_alloc_request>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_bo_alloc_request))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_bo_alloc_request>())).alloc_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_alloc_request),
            "::",
            stringify!(alloc_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_bo_alloc_request>())).phys_alignment as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_alloc_request),
            "::",
            stringify!(phys_alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_bo_alloc_request>())).preferred_heap as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_alloc_request),
            "::",
            stringify!(preferred_heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_alloc_request>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_alloc_request),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_metadata {
    pub flags: u64,
    pub tiling_info: u64,
    pub size_metadata: u32,
    pub umd_metadata: [u32; 64usize],
}
#[test]
fn bindgen_test_layout_amdgpu_bo_metadata() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_bo_metadata>(),
        280usize,
        concat!("Size of: ", stringify!(amdgpu_bo_metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_bo_metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_bo_metadata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_metadata>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_metadata),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_metadata>())).tiling_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_metadata),
            "::",
            stringify!(tiling_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_bo_metadata>())).size_metadata as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_metadata),
            "::",
            stringify!(size_metadata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_metadata>())).umd_metadata as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_metadata),
            "::",
            stringify!(umd_metadata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_info {
    pub alloc_size: u64,
    pub phys_alignment: u64,
    pub preferred_heap: u32,
    pub alloc_flags: u64,
    pub metadata: amdgpu_bo_metadata,
}
#[test]
fn bindgen_test_layout_amdgpu_bo_info() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_bo_info>(),
        312usize,
        concat!("Size of: ", stringify!(amdgpu_bo_info))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_bo_info>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_bo_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_info>())).alloc_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_info),
            "::",
            stringify!(alloc_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_info>())).phys_alignment as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_info),
            "::",
            stringify!(phys_alignment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_info>())).preferred_heap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_info),
            "::",
            stringify!(preferred_heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_info>())).alloc_flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_info),
            "::",
            stringify!(alloc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_bo_info>())).metadata as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_info),
            "::",
            stringify!(metadata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_import_result {
    pub buf_handle: amdgpu_bo_handle,
    pub alloc_size: u64,
}
#[test]
fn bindgen_test_layout_amdgpu_bo_import_result() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_bo_import_result>(),
        16usize,
        concat!("Size of: ", stringify!(amdgpu_bo_import_result))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_bo_import_result>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_bo_import_result))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_bo_import_result>())).buf_handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_import_result),
            "::",
            stringify!(buf_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_bo_import_result>())).alloc_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_bo_import_result),
            "::",
            stringify!(alloc_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_gds_resource_info {
    pub gds_gfx_partition_size: u32,
    pub compute_partition_size: u32,
    pub gds_total_size: u32,
    pub gws_per_gfx_partition: u32,
    pub gws_per_compute_partition: u32,
    pub oa_per_gfx_partition: u32,
    pub oa_per_compute_partition: u32,
}
#[test]
fn bindgen_test_layout_amdgpu_gds_resource_info() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_gds_resource_info>(),
        28usize,
        concat!("Size of: ", stringify!(amdgpu_gds_resource_info))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_gds_resource_info>(),
        4usize,
        concat!("Alignment of ", stringify!(amdgpu_gds_resource_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gds_resource_info>())).gds_gfx_partition_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gds_resource_info),
            "::",
            stringify!(gds_gfx_partition_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gds_resource_info>())).compute_partition_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gds_resource_info),
            "::",
            stringify!(compute_partition_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gds_resource_info>())).gds_total_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gds_resource_info),
            "::",
            stringify!(gds_total_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gds_resource_info>())).gws_per_gfx_partition as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gds_resource_info),
            "::",
            stringify!(gws_per_gfx_partition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gds_resource_info>())).gws_per_compute_partition
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gds_resource_info),
            "::",
            stringify!(gws_per_compute_partition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gds_resource_info>())).oa_per_gfx_partition as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gds_resource_info),
            "::",
            stringify!(oa_per_gfx_partition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gds_resource_info>())).oa_per_compute_partition
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gds_resource_info),
            "::",
            stringify!(oa_per_compute_partition)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_cs_fence {
    pub context: amdgpu_context_handle,
    pub ip_type: u32,
    pub ip_instance: u32,
    pub ring: u32,
    pub fence: u64,
}
#[test]
fn bindgen_test_layout_amdgpu_cs_fence() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_cs_fence>(),
        32usize,
        concat!("Size of: ", stringify!(amdgpu_cs_fence))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_cs_fence>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_cs_fence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_fence>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_fence),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_fence>())).ip_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_fence),
            "::",
            stringify!(ip_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_fence>())).ip_instance as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_fence),
            "::",
            stringify!(ip_instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_fence>())).ring as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_fence),
            "::",
            stringify!(ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_fence>())).fence as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_fence),
            "::",
            stringify!(fence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_cs_ib_info {
    pub flags: u64,
    pub ib_mc_address: u64,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_amdgpu_cs_ib_info() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_cs_ib_info>(),
        24usize,
        concat!("Size of: ", stringify!(amdgpu_cs_ib_info))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_cs_ib_info>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_cs_ib_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_ib_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_ib_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_ib_info>())).ib_mc_address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_ib_info),
            "::",
            stringify!(ib_mc_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_ib_info>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_ib_info),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_cs_fence_info {
    pub handle: amdgpu_bo_handle,
    pub offset: u64,
}
#[test]
fn bindgen_test_layout_amdgpu_cs_fence_info() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_cs_fence_info>(),
        16usize,
        concat!("Size of: ", stringify!(amdgpu_cs_fence_info))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_cs_fence_info>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_cs_fence_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_fence_info>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_fence_info),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_fence_info>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_fence_info),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_cs_request {
    pub flags: u64,
    pub ip_type: ::std::os::raw::c_uint,
    pub ip_instance: ::std::os::raw::c_uint,
    pub ring: u32,
    pub resources: amdgpu_bo_list_handle,
    pub number_of_dependencies: u32,
    pub dependencies: *mut amdgpu_cs_fence,
    pub number_of_ibs: u32,
    pub ibs: *mut amdgpu_cs_ib_info,
    pub seq_no: u64,
    pub fence_info: amdgpu_cs_fence_info,
}
#[test]
fn bindgen_test_layout_amdgpu_cs_request() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_cs_request>(),
        88usize,
        concat!("Size of: ", stringify!(amdgpu_cs_request))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_cs_request>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_cs_request))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).ip_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(ip_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).ip_instance as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(ip_instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).ring as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).resources as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(resources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_cs_request>())).number_of_dependencies as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(number_of_dependencies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).dependencies as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).number_of_ibs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(number_of_ibs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).ibs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(ibs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).seq_no as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(seq_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_cs_request>())).fence_info as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_cs_request),
            "::",
            stringify!(fence_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_buffer_size_alignments {
    pub size_local: u64,
    pub size_remote: u64,
}
#[test]
fn bindgen_test_layout_amdgpu_buffer_size_alignments() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_buffer_size_alignments>(),
        16usize,
        concat!("Size of: ", stringify!(amdgpu_buffer_size_alignments))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_buffer_size_alignments>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_buffer_size_alignments))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_buffer_size_alignments>())).size_local as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_buffer_size_alignments),
            "::",
            stringify!(size_local)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_buffer_size_alignments>())).size_remote as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_buffer_size_alignments),
            "::",
            stringify!(size_remote)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_heap_info {
    pub heap_size: u64,
    pub heap_usage: u64,
    pub max_allocation: u64,
}
#[test]
fn bindgen_test_layout_amdgpu_heap_info() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_heap_info>(),
        24usize,
        concat!("Size of: ", stringify!(amdgpu_heap_info))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_heap_info>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_heap_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_heap_info>())).heap_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_heap_info),
            "::",
            stringify!(heap_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_heap_info>())).heap_usage as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_heap_info),
            "::",
            stringify!(heap_usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_heap_info>())).max_allocation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_heap_info),
            "::",
            stringify!(max_allocation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_gpu_info {
    pub asic_id: u32,
    pub chip_rev: u32,
    pub chip_external_rev: u32,
    pub family_id: u32,
    pub ids_flags: u64,
    pub max_engine_clk: u64,
    pub max_memory_clk: u64,
    pub num_shader_engines: u32,
    pub num_shader_arrays_per_engine: u32,
    pub avail_quad_shader_pipes: u32,
    pub max_quad_shader_pipes: u32,
    pub cache_entries_per_quad_pipe: u32,
    pub num_hw_gfx_contexts: u32,
    pub rb_pipes: u32,
    pub enabled_rb_pipes_mask: u32,
    pub gpu_counter_freq: u32,
    pub backend_disable: [u32; 4usize],
    pub mc_arb_ramcfg: u32,
    pub gb_addr_cfg: u32,
    pub gb_tile_mode: [u32; 32usize],
    pub gb_macro_tile_mode: [u32; 16usize],
    pub pa_sc_raster_cfg: [u32; 4usize],
    pub pa_sc_raster_cfg1: [u32; 4usize],
    pub cu_active_number: u32,
    pub cu_ao_mask: u32,
    pub cu_bitmap: [[u32; 4usize]; 4usize],
    pub vram_type: u32,
    pub vram_bit_width: u32,
    pub ce_ram_size: u32,
    pub vce_harvest_config: u32,
    pub pci_rev_id: u32,
}
#[test]
fn bindgen_test_layout_amdgpu_gpu_info() {
    assert_eq!(
        ::std::mem::size_of::<amdgpu_gpu_info>(),
        416usize,
        concat!("Size of: ", stringify!(amdgpu_gpu_info))
    );
    assert_eq!(
        ::std::mem::align_of::<amdgpu_gpu_info>(),
        8usize,
        concat!("Alignment of ", stringify!(amdgpu_gpu_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).asic_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(asic_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).chip_rev as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(chip_rev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).chip_external_rev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(chip_external_rev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).family_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(family_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).ids_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(ids_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).max_engine_clk as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(max_engine_clk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).max_memory_clk as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(max_memory_clk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).num_shader_engines as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(num_shader_engines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).num_shader_arrays_per_engine as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(num_shader_arrays_per_engine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).avail_quad_shader_pipes as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(avail_quad_shader_pipes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).max_quad_shader_pipes as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(max_quad_shader_pipes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).cache_entries_per_quad_pipe as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(cache_entries_per_quad_pipe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).num_hw_gfx_contexts as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(num_hw_gfx_contexts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).rb_pipes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(rb_pipes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).enabled_rb_pipes_mask as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(enabled_rb_pipes_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).gpu_counter_freq as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(gpu_counter_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).backend_disable as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(backend_disable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).mc_arb_ramcfg as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(mc_arb_ramcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).gb_addr_cfg as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(gb_addr_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).gb_tile_mode as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(gb_tile_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).gb_macro_tile_mode as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(gb_macro_tile_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).pa_sc_raster_cfg as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(pa_sc_raster_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).pa_sc_raster_cfg1 as *const _ as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(pa_sc_raster_cfg1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).cu_active_number as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(cu_active_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).cu_ao_mask as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(cu_ao_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).cu_bitmap as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(cu_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).vram_type as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(vram_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).vram_bit_width as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(vram_bit_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).ce_ram_size as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(ce_ram_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<amdgpu_gpu_info>())).vce_harvest_config as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(vce_harvest_config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<amdgpu_gpu_info>())).pci_rev_id as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(amdgpu_gpu_info),
            "::",
            stringify!(pci_rev_id)
        )
    );
}
extern "C" {
    pub fn amdgpu_device_initialize(
        fd: ::std::os::raw::c_int,
        major_version: *mut u32,
        minor_version: *mut u32,
        device_handle: *mut amdgpu_device_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_device_deinitialize(device_handle: amdgpu_device_handle)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_device_get_fd(device_handle: amdgpu_device_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_alloc(
        dev: amdgpu_device_handle,
        alloc_buffer: *mut amdgpu_bo_alloc_request,
        buf_handle: *mut amdgpu_bo_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_set_metadata(
        buf_handle: amdgpu_bo_handle,
        info: *mut amdgpu_bo_metadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_query_info(
        buf_handle: amdgpu_bo_handle,
        info: *mut amdgpu_bo_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_export(
        buf_handle: amdgpu_bo_handle,
        type_: amdgpu_bo_handle_type,
        shared_handle: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_import(
        dev: amdgpu_device_handle,
        type_: amdgpu_bo_handle_type,
        shared_handle: u32,
        output: *mut amdgpu_bo_import_result,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_create_bo_from_user_mem(
        dev: amdgpu_device_handle,
        cpu: *mut ::std::os::raw::c_void,
        size: u64,
        buf_handle: *mut amdgpu_bo_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_find_bo_by_cpu_mapping(
        dev: amdgpu_device_handle,
        cpu: *mut ::std::os::raw::c_void,
        size: u64,
        buf_handle: *mut amdgpu_bo_handle,
        offset_in_bo: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_free(buf_handle: amdgpu_bo_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_inc_ref(bo: amdgpu_bo_handle);
}
extern "C" {
    pub fn amdgpu_bo_cpu_map(
        buf_handle: amdgpu_bo_handle,
        cpu: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_cpu_unmap(buf_handle: amdgpu_bo_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_wait_for_idle(
        buf_handle: amdgpu_bo_handle,
        timeout_ns: u64,
        buffer_busy: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_list_create_raw(
        dev: amdgpu_device_handle,
        number_of_buffers: u32,
        buffers: *mut drm_amdgpu_bo_list_entry,
        result: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_list_destroy_raw(
        dev: amdgpu_device_handle,
        bo_list: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_list_create(
        dev: amdgpu_device_handle,
        number_of_resources: u32,
        resources: *mut amdgpu_bo_handle,
        resource_prios: *mut u8,
        result: *mut amdgpu_bo_list_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_list_destroy(handle: amdgpu_bo_list_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_list_update(
        handle: amdgpu_bo_list_handle,
        number_of_resources: u32,
        resources: *mut amdgpu_bo_handle,
        resource_prios: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_ctx_create2(
        dev: amdgpu_device_handle,
        priority: u32,
        context: *mut amdgpu_context_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_ctx_create(
        dev: amdgpu_device_handle,
        context: *mut amdgpu_context_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_ctx_free(context: amdgpu_context_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_ctx_override_priority(
        dev: amdgpu_device_handle,
        context: amdgpu_context_handle,
        master_fd: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_ctx_stable_pstate(
        context: amdgpu_context_handle,
        op: u32,
        flags: u32,
        out_flags: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_query_reset_state(
        context: amdgpu_context_handle,
        state: *mut u32,
        hangs: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_query_reset_state2(
        context: amdgpu_context_handle,
        flags: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_submit(
        context: amdgpu_context_handle,
        flags: u64,
        ibs_request: *mut amdgpu_cs_request,
        number_of_requests: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_query_fence_status(
        fence: *mut amdgpu_cs_fence,
        timeout_ns: u64,
        flags: u64,
        expired: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_wait_fences(
        fences: *mut amdgpu_cs_fence,
        fence_count: u32,
        wait_all: bool,
        timeout_ns: u64,
        status: *mut u32,
        first: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_buffer_size_alignment(
        dev: amdgpu_device_handle,
        info: *mut amdgpu_buffer_size_alignments,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_firmware_version(
        dev: amdgpu_device_handle,
        fw_type: ::std::os::raw::c_uint,
        ip_instance: ::std::os::raw::c_uint,
        index: ::std::os::raw::c_uint,
        version: *mut u32,
        feature: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_hw_ip_count(
        dev: amdgpu_device_handle,
        type_: ::std::os::raw::c_uint,
        count: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_hw_ip_info(
        dev: amdgpu_device_handle,
        type_: ::std::os::raw::c_uint,
        ip_instance: ::std::os::raw::c_uint,
        info: *mut drm_amdgpu_info_hw_ip,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_heap_info(
        dev: amdgpu_device_handle,
        heap: u32,
        flags: u32,
        info: *mut amdgpu_heap_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_crtc_from_id(
        dev: amdgpu_device_handle,
        id: ::std::os::raw::c_uint,
        result: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_gpu_info(
        dev: amdgpu_device_handle,
        info: *mut amdgpu_gpu_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_info(
        dev: amdgpu_device_handle,
        info_id: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_sw_info(
        dev: amdgpu_device_handle,
        info: amdgpu_sw_info,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_gds_info(
        dev: amdgpu_device_handle,
        gds_info: *mut amdgpu_gds_resource_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_sensor_info(
        dev: amdgpu_device_handle,
        sensor_type: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_query_video_caps_info(
        dev: amdgpu_device_handle,
        cap_type: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_read_mm_registers(
        dev: amdgpu_device_handle,
        dword_offset: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        instance: u32,
        flags: u32,
        values: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_va_range_alloc(
        dev: amdgpu_device_handle,
        va_range_type: amdgpu_gpu_va_range,
        size: u64,
        va_base_alignment: u64,
        va_base_required: u64,
        va_base_allocated: *mut u64,
        va_range_handle: *mut amdgpu_va_handle,
        flags: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_va_range_free(va_range_handle: amdgpu_va_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_va_range_query(
        dev: amdgpu_device_handle,
        type_: amdgpu_gpu_va_range,
        start: *mut u64,
        end: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_va_op(
        bo: amdgpu_bo_handle,
        offset: u64,
        size: u64,
        addr: u64,
        flags: u64,
        ops: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_bo_va_op_raw(
        dev: amdgpu_device_handle,
        bo: amdgpu_bo_handle,
        offset: u64,
        size: u64,
        addr: u64,
        flags: u64,
        ops: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_create_semaphore(sem: *mut amdgpu_semaphore_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_signal_semaphore(
        ctx: amdgpu_context_handle,
        ip_type: u32,
        ip_instance: u32,
        ring: u32,
        sem: amdgpu_semaphore_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_wait_semaphore(
        ctx: amdgpu_context_handle,
        ip_type: u32,
        ip_instance: u32,
        ring: u32,
        sem: amdgpu_semaphore_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_destroy_semaphore(sem: amdgpu_semaphore_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_get_marketing_name(dev: amdgpu_device_handle) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn amdgpu_cs_create_syncobj2(
        dev: amdgpu_device_handle,
        flags: u32,
        syncobj: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_create_syncobj(
        dev: amdgpu_device_handle,
        syncobj: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_destroy_syncobj(
        dev: amdgpu_device_handle,
        syncobj: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_reset(
        dev: amdgpu_device_handle,
        syncobjs: *const u32,
        syncobj_count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_signal(
        dev: amdgpu_device_handle,
        syncobjs: *const u32,
        syncobj_count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_timeline_signal(
        dev: amdgpu_device_handle,
        syncobjs: *const u32,
        points: *mut u64,
        syncobj_count: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_wait(
        dev: amdgpu_device_handle,
        handles: *mut u32,
        num_handles: ::std::os::raw::c_uint,
        timeout_nsec: i64,
        flags: ::std::os::raw::c_uint,
        first_signaled: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_timeline_wait(
        dev: amdgpu_device_handle,
        handles: *mut u32,
        points: *mut u64,
        num_handles: ::std::os::raw::c_uint,
        timeout_nsec: i64,
        flags: ::std::os::raw::c_uint,
        first_signaled: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_query(
        dev: amdgpu_device_handle,
        handles: *mut u32,
        points: *mut u64,
        num_handles: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_query2(
        dev: amdgpu_device_handle,
        handles: *mut u32,
        points: *mut u64,
        num_handles: ::std::os::raw::c_uint,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_export_syncobj(
        dev: amdgpu_device_handle,
        syncobj: u32,
        shared_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_import_syncobj(
        dev: amdgpu_device_handle,
        shared_fd: ::std::os::raw::c_int,
        syncobj: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_export_sync_file(
        dev: amdgpu_device_handle,
        syncobj: u32,
        sync_file_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_import_sync_file(
        dev: amdgpu_device_handle,
        syncobj: u32,
        sync_file_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_export_sync_file2(
        dev: amdgpu_device_handle,
        syncobj: u32,
        point: u64,
        flags: u32,
        sync_file_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_import_sync_file2(
        dev: amdgpu_device_handle,
        syncobj: u32,
        point: u64,
        sync_file_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_syncobj_transfer(
        dev: amdgpu_device_handle,
        dst_handle: u32,
        dst_point: u64,
        src_handle: u32,
        src_point: u64,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_fence_to_handle(
        dev: amdgpu_device_handle,
        fence: *mut amdgpu_cs_fence,
        what: u32,
        out_handle: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_submit_raw(
        dev: amdgpu_device_handle,
        context: amdgpu_context_handle,
        bo_list_handle: amdgpu_bo_list_handle,
        num_chunks: ::std::os::raw::c_int,
        chunks: *mut drm_amdgpu_cs_chunk,
        seq_no: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_submit_raw2(
        dev: amdgpu_device_handle,
        context: amdgpu_context_handle,
        bo_list_handle: u32,
        num_chunks: ::std::os::raw::c_int,
        chunks: *mut drm_amdgpu_cs_chunk,
        seq_no: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_cs_chunk_fence_to_dep(
        fence: *mut amdgpu_cs_fence,
        dep: *mut drm_amdgpu_cs_chunk_dep,
    );
}
extern "C" {
    pub fn amdgpu_cs_chunk_fence_info_to_data(
        fence_info: *mut amdgpu_cs_fence_info,
        data: *mut drm_amdgpu_cs_chunk_data,
    );
}
extern "C" {
    pub fn amdgpu_vm_reserve_vmid(dev: amdgpu_device_handle, flags: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn amdgpu_vm_unreserve_vmid(dev: amdgpu_device_handle, flags: u32)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_create_in {
    pub bo_size: __u64,
    pub alignment: __u64,
    pub domains: __u64,
    pub domain_flags: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_create_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_create_in>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_create_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_create_in>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_create_in))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_create_in>())).bo_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_create_in),
            "::",
            stringify!(bo_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_create_in>())).alignment as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_create_in),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_create_in>())).domains as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_create_in),
            "::",
            stringify!(domains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_create_in>())).domain_flags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_create_in),
            "::",
            stringify!(domain_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_create_out {
    pub handle: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_create_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_create_out>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_create_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_create_out>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_create_out))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_create_out>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_create_out),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_create_out>()))._pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_create_out),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_gem_create {
    pub in_: drm_amdgpu_gem_create_in,
    pub out: drm_amdgpu_gem_create_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_create() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_create>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_create))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_create>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_create))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_create>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_create),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_create>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_create),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_bo_list_in {
    pub operation: __u32,
    pub list_handle: __u32,
    pub bo_number: __u32,
    pub bo_info_size: __u32,
    pub bo_info_ptr: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_bo_list_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_bo_list_in>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_bo_list_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_bo_list_in>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_bo_list_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_bo_list_in>())).operation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_in),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_bo_list_in>())).list_handle as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_in),
            "::",
            stringify!(list_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_bo_list_in>())).bo_number as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_in),
            "::",
            stringify!(bo_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_bo_list_in>())).bo_info_size as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_in),
            "::",
            stringify!(bo_info_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_bo_list_in>())).bo_info_ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_in),
            "::",
            stringify!(bo_info_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_bo_list_entry {
    pub bo_handle: __u32,
    pub bo_priority: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_bo_list_entry() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_bo_list_entry>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_bo_list_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_bo_list_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_bo_list_entry))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_bo_list_entry>())).bo_handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_entry),
            "::",
            stringify!(bo_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_bo_list_entry>())).bo_priority as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_entry),
            "::",
            stringify!(bo_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_bo_list_out {
    pub list_handle: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_bo_list_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_bo_list_out>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_bo_list_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_bo_list_out>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_bo_list_out))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_bo_list_out>())).list_handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_out),
            "::",
            stringify!(list_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_bo_list_out>()))._pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list_out),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_bo_list {
    pub in_: drm_amdgpu_bo_list_in,
    pub out: drm_amdgpu_bo_list_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_bo_list() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_bo_list>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_bo_list))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_bo_list>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_bo_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_bo_list>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_bo_list>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_bo_list),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_ctx_in {
    pub op: __u32,
    pub flags: __u32,
    pub ctx_id: __u32,
    pub priority: __s32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_ctx_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_ctx_in>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_ctx_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_ctx_in>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_ctx_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx_in>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_in),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx_in>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx_in>())).ctx_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_in),
            "::",
            stringify!(ctx_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx_in>())).priority as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_in),
            "::",
            stringify!(priority)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_ctx_out {
    pub alloc: drm_amdgpu_ctx_out__bindgen_ty_1,
    pub state: drm_amdgpu_ctx_out__bindgen_ty_2,
    pub pstate: drm_amdgpu_ctx_out__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_ctx_out__bindgen_ty_1 {
    pub ctx_id: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_ctx_out__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_ctx_out__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_ctx_out__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_ctx_out__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_ctx_out__bindgen_ty_1>())).ctx_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_1),
            "::",
            stringify!(ctx_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_ctx_out__bindgen_ty_1>()))._pad as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_ctx_out__bindgen_ty_2 {
    pub flags: __u64,
    pub hangs: __u32,
    pub reset_status: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_ctx_out__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_ctx_out__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_ctx_out__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_ctx_out__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_ctx_out__bindgen_ty_2>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_ctx_out__bindgen_ty_2>())).hangs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_2),
            "::",
            stringify!(hangs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_ctx_out__bindgen_ty_2>())).reset_status as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_2),
            "::",
            stringify!(reset_status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_ctx_out__bindgen_ty_3 {
    pub flags: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_ctx_out__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_ctx_out__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_ctx_out__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_ctx_out__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_ctx_out__bindgen_ty_3>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_3),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_ctx_out__bindgen_ty_3>()))._pad as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out__bindgen_ty_3),
            "::",
            stringify!(_pad)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_amdgpu_ctx_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_ctx_out>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_ctx_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_ctx_out>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_ctx_out))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx_out>())).alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx_out>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx_out>())).pstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx_out),
            "::",
            stringify!(pstate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_ctx {
    pub in_: drm_amdgpu_ctx_in,
    pub out: drm_amdgpu_ctx_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_ctx() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_ctx>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_ctx>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_ctx),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_vm_in {
    pub op: __u32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_vm_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_vm_in>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_vm_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_vm_in>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_vm_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_vm_in>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_vm_in),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_vm_in>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_vm_in),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_vm_out {
    pub flags: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_vm_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_vm_out>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_vm_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_vm_out>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_vm_out))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_vm_out>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_vm_out),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_vm {
    pub in_: drm_amdgpu_vm_in,
    pub out: drm_amdgpu_vm_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_vm() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_vm>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_vm))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_vm>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_vm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_vm>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_vm),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_vm>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_vm),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_sched_in {
    pub op: __u32,
    pub fd: __u32,
    pub priority: __s32,
    pub ctx_id: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_sched_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_sched_in>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_sched_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_sched_in>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_sched_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_sched_in>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_sched_in),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_sched_in>())).fd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_sched_in),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_sched_in>())).priority as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_sched_in),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_sched_in>())).ctx_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_sched_in),
            "::",
            stringify!(ctx_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_sched {
    pub in_: drm_amdgpu_sched_in,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_sched() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_sched>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_sched))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_sched>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_sched))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_sched>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_sched),
            "::",
            stringify!(in_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_userptr {
    pub addr: __u64,
    pub size: __u64,
    pub flags: __u32,
    pub handle: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_userptr() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_userptr>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_userptr))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_userptr>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_userptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_userptr>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_userptr),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_userptr>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_userptr),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_userptr>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_userptr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_userptr>())).handle as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_userptr),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_metadata {
    pub handle: __u32,
    pub op: __u32,
    pub data: drm_amdgpu_gem_metadata__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_metadata__bindgen_ty_1 {
    pub flags: __u64,
    pub tiling_info: __u64,
    pub data_size_bytes: __u32,
    pub data: [__u32; 64usize],
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_metadata__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_metadata__bindgen_ty_1>(),
        280usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_gem_metadata__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_metadata__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_gem_metadata__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_metadata__bindgen_ty_1>())).flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_metadata__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_metadata__bindgen_ty_1>())).tiling_info
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_metadata__bindgen_ty_1),
            "::",
            stringify!(tiling_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_metadata__bindgen_ty_1>())).data_size_bytes
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_metadata__bindgen_ty_1),
            "::",
            stringify!(data_size_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_metadata__bindgen_ty_1>())).data as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_metadata__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_metadata() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_metadata>(),
        288usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_metadata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_metadata>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_metadata),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_metadata>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_metadata),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_metadata>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_metadata),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_mmap_in {
    pub handle: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_mmap_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_mmap_in>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_mmap_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_mmap_in>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_mmap_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_mmap_in>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_mmap_in),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_mmap_in>()))._pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_mmap_in),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_mmap_out {
    pub addr_ptr: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_mmap_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_mmap_out>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_mmap_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_mmap_out>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_mmap_out))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_mmap_out>())).addr_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_mmap_out),
            "::",
            stringify!(addr_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_gem_mmap {
    pub in_: drm_amdgpu_gem_mmap_in,
    pub out: drm_amdgpu_gem_mmap_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_mmap() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_mmap>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_mmap))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_mmap>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_mmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_mmap>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_mmap),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_mmap>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_mmap),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_wait_idle_in {
    pub handle: __u32,
    pub flags: __u32,
    pub timeout: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_wait_idle_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_wait_idle_in>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_wait_idle_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_wait_idle_in>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_wait_idle_in))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_wait_idle_in>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_wait_idle_in),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_wait_idle_in>())).flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_wait_idle_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_wait_idle_in>())).timeout as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_wait_idle_in),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_wait_idle_out {
    pub status: __u32,
    pub domain: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_wait_idle_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_wait_idle_out>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_wait_idle_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_wait_idle_out>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_wait_idle_out))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_wait_idle_out>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_wait_idle_out),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_gem_wait_idle_out>())).domain as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_wait_idle_out),
            "::",
            stringify!(domain)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_gem_wait_idle {
    pub in_: drm_amdgpu_gem_wait_idle_in,
    pub out: drm_amdgpu_gem_wait_idle_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_wait_idle() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_wait_idle>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_wait_idle))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_wait_idle>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_wait_idle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_wait_idle>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_wait_idle),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_wait_idle>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_wait_idle),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_wait_cs_in {
    pub handle: __u64,
    pub timeout: __u64,
    pub ip_type: __u32,
    pub ip_instance: __u32,
    pub ring: __u32,
    pub ctx_id: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_wait_cs_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_wait_cs_in>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_wait_cs_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_wait_cs_in>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_wait_cs_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_cs_in>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs_in),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_cs_in>())).timeout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs_in),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_cs_in>())).ip_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs_in),
            "::",
            stringify!(ip_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_wait_cs_in>())).ip_instance as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs_in),
            "::",
            stringify!(ip_instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_cs_in>())).ring as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs_in),
            "::",
            stringify!(ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_cs_in>())).ctx_id as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs_in),
            "::",
            stringify!(ctx_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_wait_cs_out {
    pub status: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_wait_cs_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_wait_cs_out>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_wait_cs_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_wait_cs_out>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_wait_cs_out))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_cs_out>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs_out),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_wait_cs {
    pub in_: drm_amdgpu_wait_cs_in,
    pub out: drm_amdgpu_wait_cs_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_wait_cs() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_wait_cs>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_wait_cs))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_wait_cs>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_wait_cs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_cs>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_cs>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_cs),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_fence {
    pub ctx_id: __u32,
    pub ip_type: __u32,
    pub ip_instance: __u32,
    pub ring: __u32,
    pub seq_no: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_fence() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_fence>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_fence))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_fence>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_fence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_fence>())).ctx_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence),
            "::",
            stringify!(ctx_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_fence>())).ip_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence),
            "::",
            stringify!(ip_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_fence>())).ip_instance as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence),
            "::",
            stringify!(ip_instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_fence>())).ring as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence),
            "::",
            stringify!(ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_fence>())).seq_no as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence),
            "::",
            stringify!(seq_no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_wait_fences_in {
    pub fences: __u64,
    pub fence_count: __u32,
    pub wait_all: __u32,
    pub timeout_ns: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_wait_fences_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_wait_fences_in>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_wait_fences_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_wait_fences_in>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_wait_fences_in))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_wait_fences_in>())).fences as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_fences_in),
            "::",
            stringify!(fences)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_wait_fences_in>())).fence_count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_fences_in),
            "::",
            stringify!(fence_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_wait_fences_in>())).wait_all as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_fences_in),
            "::",
            stringify!(wait_all)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_wait_fences_in>())).timeout_ns as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_fences_in),
            "::",
            stringify!(timeout_ns)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_wait_fences_out {
    pub status: __u32,
    pub first_signaled: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_wait_fences_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_wait_fences_out>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_wait_fences_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_wait_fences_out>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_wait_fences_out))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_wait_fences_out>())).status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_fences_out),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_wait_fences_out>())).first_signaled as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_fences_out),
            "::",
            stringify!(first_signaled)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_wait_fences {
    pub in_: drm_amdgpu_wait_fences_in,
    pub out: drm_amdgpu_wait_fences_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_wait_fences() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_wait_fences>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_wait_fences))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_wait_fences>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_wait_fences))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_fences>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_fences),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_wait_fences>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_wait_fences),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_op {
    pub handle: __u32,
    pub op: __u32,
    pub value: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_op() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_op>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_op))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_op>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_op>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_op),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_op>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_op>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_op),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_va {
    pub handle: __u32,
    pub _pad: __u32,
    pub operation: __u32,
    pub flags: __u32,
    pub va_address: __u64,
    pub offset_in_bo: __u64,
    pub map_size: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_gem_va() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_gem_va>(),
        40usize,
        concat!("Size of: ", stringify!(drm_amdgpu_gem_va))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_gem_va>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_gem_va))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_va>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_va),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_va>()))._pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_va),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_va>())).operation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_va),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_va>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_va),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_va>())).va_address as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_va),
            "::",
            stringify!(va_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_va>())).offset_in_bo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_va),
            "::",
            stringify!(offset_in_bo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_gem_va>())).map_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_gem_va),
            "::",
            stringify!(map_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk {
    pub chunk_id: __u32,
    pub length_dw: __u32,
    pub chunk_data: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_chunk() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_chunk>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_chunk))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_chunk>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_chunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk>())).chunk_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk),
            "::",
            stringify!(chunk_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk>())).length_dw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk),
            "::",
            stringify!(length_dw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk>())).chunk_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk),
            "::",
            stringify!(chunk_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_in {
    pub ctx_id: __u32,
    pub bo_list_handle: __u32,
    pub num_chunks: __u32,
    pub flags: __u32,
    pub chunks: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_in() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_in>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_in))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_in>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_in>())).ctx_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_in),
            "::",
            stringify!(ctx_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_in>())).bo_list_handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_in),
            "::",
            stringify!(bo_list_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_in>())).num_chunks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_in),
            "::",
            stringify!(num_chunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_in>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_in>())).chunks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_in),
            "::",
            stringify!(chunks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_out {
    pub handle: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_out() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_out>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_out))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_out>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_out))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_out>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_out),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_cs {
    pub in_: drm_amdgpu_cs_in,
    pub out: drm_amdgpu_cs_out,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_ib {
    pub _pad: __u32,
    pub flags: __u32,
    pub va_start: __u64,
    pub ib_bytes: __u32,
    pub ip_type: __u32,
    pub ip_instance: __u32,
    pub ring: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_chunk_ib() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_chunk_ib>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_chunk_ib))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_chunk_ib>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_chunk_ib))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_ib>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_ib),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_ib>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_ib),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_ib>())).va_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_ib),
            "::",
            stringify!(va_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_ib>())).ib_bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_ib),
            "::",
            stringify!(ib_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_ib>())).ip_type as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_ib),
            "::",
            stringify!(ip_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_ib>())).ip_instance as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_ib),
            "::",
            stringify!(ip_instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_ib>())).ring as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_ib),
            "::",
            stringify!(ring)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_dep {
    pub ip_type: __u32,
    pub ip_instance: __u32,
    pub ring: __u32,
    pub ctx_id: __u32,
    pub handle: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_chunk_dep() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_chunk_dep>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_chunk_dep))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_chunk_dep>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_chunk_dep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_dep>())).ip_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_dep),
            "::",
            stringify!(ip_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_dep>())).ip_instance as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_dep),
            "::",
            stringify!(ip_instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_dep>())).ring as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_dep),
            "::",
            stringify!(ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_dep>())).ctx_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_dep),
            "::",
            stringify!(ctx_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_dep>())).handle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_dep),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_fence {
    pub handle: __u32,
    pub offset: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_chunk_fence() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_chunk_fence>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_chunk_fence))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_chunk_fence>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_chunk_fence))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_fence>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_fence),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_fence>())).offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_fence),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_sem {
    pub handle: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_chunk_sem() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_chunk_sem>(),
        4usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_chunk_sem))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_chunk_sem>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_chunk_sem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_sem>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_sem),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_syncobj {
    pub handle: __u32,
    pub flags: __u32,
    pub point: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_chunk_syncobj() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_chunk_syncobj>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_chunk_syncobj))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_chunk_syncobj>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_chunk_syncobj))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_syncobj>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_syncobj),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_syncobj>())).flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_syncobj),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_syncobj>())).point as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_syncobj),
            "::",
            stringify!(point)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_fence_to_handle {
    pub in_: drm_amdgpu_fence_to_handle__bindgen_ty_1,
    pub out: drm_amdgpu_fence_to_handle__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_fence_to_handle__bindgen_ty_1 {
    pub fence: drm_amdgpu_fence,
    pub what: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_fence_to_handle__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_fence_to_handle__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_fence_to_handle__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_fence_to_handle__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_fence_to_handle__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_fence_to_handle__bindgen_ty_1>())).fence as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence_to_handle__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_fence_to_handle__bindgen_ty_1>())).what as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence_to_handle__bindgen_ty_1),
            "::",
            stringify!(what)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_fence_to_handle__bindgen_ty_1>())).pad as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence_to_handle__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_fence_to_handle__bindgen_ty_2 {
    pub handle: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_fence_to_handle__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_fence_to_handle__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_fence_to_handle__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_fence_to_handle__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_fence_to_handle__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_fence_to_handle__bindgen_ty_2>())).handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence_to_handle__bindgen_ty_2),
            "::",
            stringify!(handle)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_amdgpu_fence_to_handle() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_fence_to_handle>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_fence_to_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_fence_to_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_fence_to_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_fence_to_handle>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence_to_handle),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_fence_to_handle>())).out as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_fence_to_handle),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_data {
    pub __bindgen_anon_1: drm_amdgpu_cs_chunk_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_cs_chunk_data__bindgen_ty_1 {
    pub ib_data: drm_amdgpu_cs_chunk_ib,
    pub fence_data: drm_amdgpu_cs_chunk_fence,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_chunk_data__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_chunk_data__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_cs_chunk_data__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_chunk_data__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_cs_chunk_data__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_data__bindgen_ty_1>())).ib_data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_data__bindgen_ty_1),
            "::",
            stringify!(ib_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_cs_chunk_data__bindgen_ty_1>())).fence_data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_cs_chunk_data__bindgen_ty_1),
            "::",
            stringify!(fence_data)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_amdgpu_cs_chunk_data() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_cs_chunk_data>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_cs_chunk_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_cs_chunk_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_cs_chunk_data))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_query_fw {
    pub fw_type: __u32,
    pub ip_instance: __u32,
    pub index: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_query_fw() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_query_fw>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_query_fw))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_query_fw>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_query_fw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_query_fw>())).fw_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_query_fw),
            "::",
            stringify!(fw_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_query_fw>())).ip_instance as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_query_fw),
            "::",
            stringify!(ip_instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_query_fw>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_query_fw),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_query_fw>()))._pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_query_fw),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct drm_amdgpu_info {
    pub return_pointer: __u64,
    pub return_size: __u32,
    pub query: __u32,
    pub __bindgen_anon_1: drm_amdgpu_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_info__bindgen_ty_1 {
    pub mode_crtc: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1,
    pub query_hw_ip: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2,
    pub read_mmr_reg: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3,
    pub query_fw: drm_amdgpu_query_fw,
    pub vbios_info: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4,
    pub sensor_info: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5,
    pub video_cap: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1 {
    pub id: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1>())).id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1>()))._pad as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2 {
    pub type_: __u32,
    pub ip_instance: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2>())).ip_instance
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ip_instance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3 {
    pub dword_offset: __u32,
    pub count: __u32,
    pub instance: __u32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3>())).dword_offset
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(dword_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3>())).count
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3>())).instance
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3>())).flags
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4 {
    pub type_: __u32,
    pub offset: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4>())).offset
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5 {
    pub type_: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6 {
    pub type_: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(type_)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1>())).mode_crtc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1),
            "::",
            stringify!(mode_crtc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1>())).query_hw_ip as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1),
            "::",
            stringify!(query_hw_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1>())).read_mmr_reg as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1),
            "::",
            stringify!(read_mmr_reg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1>())).query_fw as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1),
            "::",
            stringify!(query_fw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1>())).vbios_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1),
            "::",
            stringify!(vbios_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1>())).sensor_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1),
            "::",
            stringify!(sensor_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info__bindgen_ty_1>())).video_cap as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info__bindgen_ty_1),
            "::",
            stringify!(video_cap)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info>())).return_pointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info),
            "::",
            stringify!(return_pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info>())).return_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info),
            "::",
            stringify!(return_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info>())).query as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info),
            "::",
            stringify!(query)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_gds {
    pub gds_gfx_partition_size: __u32,
    pub compute_partition_size: __u32,
    pub gds_total_size: __u32,
    pub gws_per_gfx_partition: __u32,
    pub gws_per_compute_partition: __u32,
    pub oa_per_gfx_partition: __u32,
    pub oa_per_compute_partition: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_gds() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_gds>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_gds))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_gds>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_gds))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_gds>())).gds_gfx_partition_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_gds),
            "::",
            stringify!(gds_gfx_partition_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_gds>())).compute_partition_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_gds),
            "::",
            stringify!(compute_partition_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_gds>())).gds_total_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_gds),
            "::",
            stringify!(gds_total_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_gds>())).gws_per_gfx_partition as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_gds),
            "::",
            stringify!(gws_per_gfx_partition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_gds>())).gws_per_compute_partition as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_gds),
            "::",
            stringify!(gws_per_compute_partition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_gds>())).oa_per_gfx_partition as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_gds),
            "::",
            stringify!(oa_per_gfx_partition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_gds>())).oa_per_compute_partition as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_gds),
            "::",
            stringify!(oa_per_compute_partition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_gds>()))._pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_gds),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_vram_gtt {
    pub vram_size: __u64,
    pub vram_cpu_accessible_size: __u64,
    pub gtt_size: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_vram_gtt() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_vram_gtt>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_vram_gtt))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_vram_gtt>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_vram_gtt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vram_gtt>())).vram_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vram_gtt),
            "::",
            stringify!(vram_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vram_gtt>())).vram_cpu_accessible_size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vram_gtt),
            "::",
            stringify!(vram_cpu_accessible_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vram_gtt>())).gtt_size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vram_gtt),
            "::",
            stringify!(gtt_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_heap_info {
    pub total_heap_size: __u64,
    pub usable_heap_size: __u64,
    pub heap_usage: __u64,
    pub max_allocation: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_heap_info() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_heap_info>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_heap_info))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_heap_info>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_heap_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_heap_info>())).total_heap_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_heap_info),
            "::",
            stringify!(total_heap_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_heap_info>())).usable_heap_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_heap_info),
            "::",
            stringify!(usable_heap_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_heap_info>())).heap_usage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_heap_info),
            "::",
            stringify!(heap_usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_heap_info>())).max_allocation as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_heap_info),
            "::",
            stringify!(max_allocation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_memory_info {
    pub vram: drm_amdgpu_heap_info,
    pub cpu_accessible_vram: drm_amdgpu_heap_info,
    pub gtt: drm_amdgpu_heap_info,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_memory_info() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_memory_info>(),
        96usize,
        concat!("Size of: ", stringify!(drm_amdgpu_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_memory_info>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_memory_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_memory_info>())).vram as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_memory_info),
            "::",
            stringify!(vram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_memory_info>())).cpu_accessible_vram as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_memory_info),
            "::",
            stringify!(cpu_accessible_vram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_memory_info>())).gtt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_memory_info),
            "::",
            stringify!(gtt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_firmware {
    pub ver: __u32,
    pub feature: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_firmware() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_firmware>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_firmware))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_firmware>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_firmware))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_firmware>())).ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_firmware),
            "::",
            stringify!(ver)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_firmware>())).feature as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_firmware),
            "::",
            stringify!(feature)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_vbios {
    pub name: [__u8; 64usize],
    pub vbios_pn: [__u8; 64usize],
    pub version: __u32,
    pub pad: __u32,
    pub vbios_ver_str: [__u8; 32usize],
    pub date: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_vbios() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_vbios>(),
        200usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_vbios))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_vbios>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_vbios))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_vbios>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vbios),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_vbios>())).vbios_pn as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vbios),
            "::",
            stringify!(vbios_pn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_vbios>())).version as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vbios),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_vbios>())).pad as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vbios),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vbios>())).vbios_ver_str as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vbios),
            "::",
            stringify!(vbios_ver_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_vbios>())).date as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vbios),
            "::",
            stringify!(date)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_device {
    pub device_id: __u32,
    pub chip_rev: __u32,
    pub external_rev: __u32,
    pub pci_rev: __u32,
    pub family: __u32,
    pub num_shader_engines: __u32,
    pub num_shader_arrays_per_engine: __u32,
    pub gpu_counter_freq: __u32,
    pub max_engine_clock: __u64,
    pub max_memory_clock: __u64,
    pub cu_active_number: __u32,
    pub cu_ao_mask: __u32,
    pub cu_bitmap: [[__u32; 4usize]; 4usize],
    pub enabled_rb_pipes_mask: __u32,
    pub num_rb_pipes: __u32,
    pub num_hw_gfx_contexts: __u32,
    pub _pad: __u32,
    pub ids_flags: __u64,
    pub virtual_address_offset: __u64,
    pub virtual_address_max: __u64,
    pub virtual_address_alignment: __u32,
    pub pte_fragment_size: __u32,
    pub gart_page_size: __u32,
    pub ce_ram_size: __u32,
    pub vram_type: __u32,
    pub vram_bit_width: __u32,
    pub vce_harvest_config: __u32,
    pub gc_double_offchip_lds_buf: __u32,
    pub prim_buf_gpu_addr: __u64,
    pub pos_buf_gpu_addr: __u64,
    pub cntl_sb_buf_gpu_addr: __u64,
    pub param_buf_gpu_addr: __u64,
    pub prim_buf_size: __u32,
    pub pos_buf_size: __u32,
    pub cntl_sb_buf_size: __u32,
    pub param_buf_size: __u32,
    pub wave_front_size: __u32,
    pub num_shader_visible_vgprs: __u32,
    pub num_cu_per_sh: __u32,
    pub num_tcc_blocks: __u32,
    pub gs_vgt_table_depth: __u32,
    pub gs_prim_buffer_depth: __u32,
    pub max_gs_waves_per_vgt: __u32,
    pub _pad1: __u32,
    pub cu_ao_bitmap: [[__u32; 4usize]; 4usize],
    pub high_va_offset: __u64,
    pub high_va_max: __u64,
    pub pa_sc_tile_steering_override: __u32,
    pub tcc_disabled_mask: __u64,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_device() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_device>(),
        368usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_device))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_device>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_device))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).device_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(device_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_device>())).chip_rev as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(chip_rev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).external_rev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(external_rev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_device>())).pci_rev as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(pci_rev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_device>())).family as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).num_shader_engines as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(num_shader_engines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).num_shader_arrays_per_engine
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(num_shader_arrays_per_engine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).gpu_counter_freq as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(gpu_counter_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).max_engine_clock as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(max_engine_clock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).max_memory_clock as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(max_memory_clock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).cu_active_number as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(cu_active_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).cu_ao_mask as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(cu_ao_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).cu_bitmap as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(cu_bitmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).enabled_rb_pipes_mask as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(enabled_rb_pipes_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).num_rb_pipes as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(num_rb_pipes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).num_hw_gfx_contexts as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(num_hw_gfx_contexts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_device>()))._pad as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).ids_flags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(ids_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).virtual_address_offset as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(virtual_address_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).virtual_address_max as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(virtual_address_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).virtual_address_alignment as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(virtual_address_alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).pte_fragment_size as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(pte_fragment_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).gart_page_size as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(gart_page_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).ce_ram_size as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(ce_ram_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).vram_type as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(vram_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).vram_bit_width as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(vram_bit_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).vce_harvest_config as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(vce_harvest_config)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).gc_double_offchip_lds_buf as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(gc_double_offchip_lds_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).prim_buf_gpu_addr as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(prim_buf_gpu_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).pos_buf_gpu_addr as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(pos_buf_gpu_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).cntl_sb_buf_gpu_addr as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(cntl_sb_buf_gpu_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).param_buf_gpu_addr as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(param_buf_gpu_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).prim_buf_size as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(prim_buf_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).pos_buf_size as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(pos_buf_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).cntl_sb_buf_size as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(cntl_sb_buf_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).param_buf_size as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(param_buf_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).wave_front_size as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(wave_front_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).num_shader_visible_vgprs as *const _
                as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(num_shader_visible_vgprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).num_cu_per_sh as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(num_cu_per_sh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).num_tcc_blocks as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(num_tcc_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).gs_vgt_table_depth as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(gs_vgt_table_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).gs_prim_buffer_depth as *const _
                as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(gs_prim_buffer_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).max_gs_waves_per_vgt as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(max_gs_waves_per_vgt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_device>()))._pad1 as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(_pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).cu_ao_bitmap as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(cu_ao_bitmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).high_va_offset as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(high_va_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).high_va_max as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(high_va_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).pa_sc_tile_steering_override
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(pa_sc_tile_steering_override)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_device>())).tcc_disabled_mask as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_device),
            "::",
            stringify!(tcc_disabled_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_hw_ip {
    pub hw_ip_version_major: __u32,
    pub hw_ip_version_minor: __u32,
    pub capabilities_flags: __u64,
    pub ib_start_alignment: __u32,
    pub ib_size_alignment: __u32,
    pub available_rings: __u32,
    pub _pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_hw_ip() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_hw_ip>(),
        32usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_hw_ip))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_hw_ip>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_hw_ip))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_hw_ip>())).hw_ip_version_major as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_hw_ip),
            "::",
            stringify!(hw_ip_version_major)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_hw_ip>())).hw_ip_version_minor as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_hw_ip),
            "::",
            stringify!(hw_ip_version_minor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_hw_ip>())).capabilities_flags as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_hw_ip),
            "::",
            stringify!(capabilities_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_hw_ip>())).ib_start_alignment as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_hw_ip),
            "::",
            stringify!(ib_start_alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_hw_ip>())).ib_size_alignment as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_hw_ip),
            "::",
            stringify!(ib_size_alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_hw_ip>())).available_rings as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_hw_ip),
            "::",
            stringify!(available_rings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_amdgpu_info_hw_ip>()))._pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_hw_ip),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_num_handles {
    pub uvd_max_handles: __u32,
    pub uvd_used_handles: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_num_handles() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_num_handles>(),
        8usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_num_handles))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_num_handles>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_num_handles))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_num_handles>())).uvd_max_handles as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_num_handles),
            "::",
            stringify!(uvd_max_handles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_num_handles>())).uvd_used_handles as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_num_handles),
            "::",
            stringify!(uvd_used_handles)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_vce_clock_table_entry {
    pub sclk: __u32,
    pub mclk: __u32,
    pub eclk: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_vce_clock_table_entry() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_vce_clock_table_entry>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(drm_amdgpu_info_vce_clock_table_entry)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_vce_clock_table_entry>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_info_vce_clock_table_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vce_clock_table_entry>())).sclk as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vce_clock_table_entry),
            "::",
            stringify!(sclk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vce_clock_table_entry>())).mclk as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vce_clock_table_entry),
            "::",
            stringify!(mclk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vce_clock_table_entry>())).eclk as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vce_clock_table_entry),
            "::",
            stringify!(eclk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vce_clock_table_entry>())).pad as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vce_clock_table_entry),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_vce_clock_table {
    pub entries: [drm_amdgpu_info_vce_clock_table_entry; 6usize],
    pub num_valid_entries: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_vce_clock_table() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_vce_clock_table>(),
        104usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_vce_clock_table))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_vce_clock_table>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_vce_clock_table))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vce_clock_table>())).entries as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vce_clock_table),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vce_clock_table>())).num_valid_entries
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vce_clock_table),
            "::",
            stringify!(num_valid_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_vce_clock_table>())).pad as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_vce_clock_table),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_video_codec_info {
    pub valid: __u32,
    pub max_width: __u32,
    pub max_height: __u32,
    pub max_pixels_per_frame: __u32,
    pub max_level: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_video_codec_info() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_video_codec_info>(),
        24usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_video_codec_info))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_video_codec_info>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_amdgpu_info_video_codec_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_video_codec_info>())).valid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_video_codec_info),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_video_codec_info>())).max_width as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_video_codec_info),
            "::",
            stringify!(max_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_video_codec_info>())).max_height as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_video_codec_info),
            "::",
            stringify!(max_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_video_codec_info>())).max_pixels_per_frame
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_video_codec_info),
            "::",
            stringify!(max_pixels_per_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_video_codec_info>())).max_level as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_video_codec_info),
            "::",
            stringify!(max_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_video_codec_info>())).pad as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_video_codec_info),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_video_caps {
    pub codec_info: [drm_amdgpu_info_video_codec_info; 8usize],
}
#[test]
fn bindgen_test_layout_drm_amdgpu_info_video_caps() {
    assert_eq!(
        ::std::mem::size_of::<drm_amdgpu_info_video_caps>(),
        192usize,
        concat!("Size of: ", stringify!(drm_amdgpu_info_video_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_amdgpu_info_video_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_amdgpu_info_video_caps))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_amdgpu_info_video_caps>())).codec_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_amdgpu_info_video_caps),
            "::",
            stringify!(codec_info)
        )
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
